/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.37
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct Pointer {
    T *ptr;
    Pointer(T *p) : ptr(p) { }
    ~Pointer() { delete ptr; }
    Pointer& operator=(Pointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { Pointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); return TCL_ERROR;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CApplicationProcess swig_types[0]
#define SWIGTYPE_p_CBaseIndex swig_types[1]
#define SWIGTYPE_p_CComplexDataType swig_types[2]
#define SWIGTYPE_p_CDataTypeCollection swig_types[3]
#define SWIGTYPE_p_CIndex swig_types[4]
#define SWIGTYPE_p_CIndexCollection swig_types[5]
#define SWIGTYPE_p_CNode swig_types[6]
#define SWIGTYPE_p_CNodeCollection swig_types[7]
#define SWIGTYPE_p_CSubIndex swig_types[8]
#define SWIGTYPE_p_DataType swig_types[9]
#define SWIGTYPE_p_EAttributeType swig_types[10]
#define SWIGTYPE_p_EAutoGenerate swig_types[11]
#define SWIGTYPE_p_EAutoSave swig_types[12]
#define SWIGTYPE_p_EConfiuguratorErrors swig_types[13]
#define SWIGTYPE_p_EFlag swig_types[14]
#define SWIGTYPE_p_ENodeType swig_types[15]
#define SWIGTYPE_p_EObjectType swig_types[16]
#define SWIGTYPE_p_EPDOMapping swig_types[17]
#define SWIGTYPE_p_EPDOType swig_types[18]
#define SWIGTYPE_p_EParameterAccess swig_types[19]
#define SWIGTYPE_p_EProjectSettings swig_types[20]
#define SWIGTYPE_p_IEC_Datatype swig_types[21]
#define SWIGTYPE_p_MNPdoVariable swig_types[22]
#define SWIGTYPE_p_Parameter swig_types[23]
#define SWIGTYPE_p_ProcessImage swig_types[24]
#define SWIGTYPE_p_TCollectionT_CComplexDataType_t swig_types[25]
#define SWIGTYPE_p_TCollectionT_MNPdoVariable_t swig_types[26]
#define SWIGTYPE_p_TCollectionT_Parameter_t swig_types[27]
#define SWIGTYPE_p_TCollectionT_ProcessImage_t swig_types[28]
#define SWIGTYPE_p_TCollectionT_varDeclaration_t swig_types[29]
#define SWIGTYPE_p_appProcessCommon swig_types[30]
#define SWIGTYPE_p_bool swig_types[31]
#define SWIGTYPE_p_char swig_types[32]
#define SWIGTYPE_p_int swig_types[33]
#define SWIGTYPE_p_long swig_types[34]
#define SWIGTYPE_p_ocfmRetCode swig_types[35]
#define SWIGTYPE_p_ocfmRetValError swig_types[36]
#define SWIGTYPE_p_unsigned_char swig_types[37]
#define SWIGTYPE_p_unsigned_int swig_types[38]
#define SWIGTYPE_p_unsigned_short swig_types[39]
#define SWIGTYPE_p_varDeclaration swig_types[40]
static swig_type_info *swig_types[42];
static swig_module_info swig_module = {swig_types, 41, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Openconfiguratorwrapper_Init
#define SWIG_name    "openconfiguratorwrapper"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x010337 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif



#include "../openCONFIGURATOR/Include/ApplicationProcess.h"
#include "../openCONFIGURATOR/Include/BaseIndex.h"
#include "../openCONFIGURATOR/Include/ComplexDataType.h"
#include "../openCONFIGURATOR/Include/Error.h"

#include "../openCONFIGURATOR/Include/Exports.h"
#include "../openCONFIGURATOR/Include/DataTypeCollection.h"
#include "../openCONFIGURATOR/Include/Declarations.h"
#include "../openCONFIGURATOR/Include/globals.h"
#include "../openCONFIGURATOR/Include/IndexCollection.h"
#include "../openCONFIGURATOR/Include/Index.h"
#include "../openCONFIGURATOR/Include/NodeCollection.h"
#include "../openCONFIGURATOR/Include/Node.h"
#include "../openCONFIGURATOR/Include/SubIndex.h"
#include "../openCONFIGURATOR/Include/TCollection.h"
#include "../openCONFIGURATOR/Include/template.h"


  static char *new_charp() { 
    return (new char);
  }
  
  static char *copy_charp(char value) { 
    return (new char(static_cast< const char& >(value)));
  }

  static void delete_charp(char *self) { 
    if (self) delete self;
  }

  static void charp_assign(char *self, char value) {
    *self = value;
  }

  static char charp_value(char *self) {
    return *self;
  }


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}





SWIGINTERNINLINE Tcl_Obj *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


  static long *new_longp() { 
    return (new long);
  }
  
  static long *copy_longp(long value) { 
    return (new long(static_cast< const long& >(value)));
  }

  static void delete_longp(long *self) { 
    if (self) delete self;
  }

  static void longp_assign(long *self, long value) {
    *self = value;
  }

  static long longp_value(long *self) {
    return *self;
  }


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


  static int *new_intp() { 
    return (new int);
  }
  
  static int *copy_intp(int value) { 
    return (new int(static_cast< const int& >(value)));
  }

  static void delete_intp(int *self) { 
    if (self) delete self;
  }

  static void intp_assign(int *self, int value) {
    *self = value;
  }

  static int intp_value(int *self) {
    return *self;
  }


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


  static bool *new_boolp() { 
    return (new bool);
  }
  
  static bool *copy_boolp(bool value) { 
    return (new bool(static_cast< const bool& >(value)));
  }

  static void delete_boolp(bool *self) { 
    if (self) delete self;
  }

  static void boolp_assign(bool *self, bool value) {
    *self = value;
  }

  static bool boolp_value(bool *self) {
    return *self;
  }


SWIGINTERN int
SWIG_AsVal_bool SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, bool *val)
{
  int v;
  if (Tcl_GetBooleanFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v ? true : false;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_bool   Tcl_NewBooleanObj 


  static EAutoGenerate *new_EAutoGeneratep() { 
    return (new EAutoGenerate);
  }
  
  static EAutoGenerate *copy_EAutoGeneratep(EAutoGenerate value) { 
    return (new EAutoGenerate(static_cast< const EAutoGenerate& >(value)));
  }

  static void delete_EAutoGeneratep(EAutoGenerate *self) { 
    if (self) delete self;
  }

  static void EAutoGeneratep_assign(EAutoGenerate *self, EAutoGenerate value) {
    *self = value;
  }

  static EAutoGenerate EAutoGeneratep_value(EAutoGenerate *self) {
    return *self;
  }


  static EAutoSave *new_EAutoSavep() { 
    return (new EAutoSave);
  }
  
  static EAutoSave *copy_EAutoSavep(EAutoSave value) { 
    return (new EAutoSave(static_cast< const EAutoSave& >(value)));
  }

  static void delete_EAutoSavep(EAutoSave *self) { 
    if (self) delete self;
  }

  static void EAutoSavep_assign(EAutoSave *self, EAutoSave value) {
    *self = value;
  }

  static EAutoSave EAutoSavep_value(EAutoSave *self) {
    return *self;
  }


#include <stdexcept>



ocfmRetCode ImportXML(char* fileName, int NodeID, ENodeType NodeType);
ocfmRetCode ReImportXML(char* fileName, int NodeID, ENodeType NodeType);

ocfmRetCode GenerateXAP(char* fileName);
ocfmRetCode GenerateCDC(char* fileName);

ocfmRetCode CreateNode(int NodeID, ENodeType NodeType, char* NodeName);
ocfmRetCode parseFile(char* filename, int NodeID, ENodeType  NodeType);
ocfmRetCode DeleteNode(int NodeID, ENodeType NodeType);
ocfmRetCode DeleteNodeObjDict(int NodeID, ENodeType NodeType);

ocfmRetCode DeleteIndex(int NodeID, ENodeType NodeType, char* IndexID);
ocfmRetCode DeleteSubIndex(int NodeID, ENodeType NodeType, char* IndexID, char* SubIndexID);
ocfmRetCode AddIndex(int NodeID, ENodeType NodeType, char* IndexID);
ocfmRetCode AddSubIndex(int NodeID, ENodeType NodeType, char* IndexID, char* SubIndexID);
ocfmRetCode SetIndexAttributes(int NodeID, ENodeType NodeType, char* IndexID, char* IndexValue, char* IndexName, EFlag flagIfInCdc);
ocfmRetCode SetSubIndexAttributes(int NodeID, ENodeType NodeType, char* IndexID, char* SubIndexID, char* IndexValue, char* IndexName);

ocfmRetCode IfNodeExists(int NodeID, ENodeType NodeType, int* NodePos, bool& ExistfFlag);
ocfmRetCode IfIndexExists(int NodeID, ENodeType NodeType, char* IndexID, int* IndexPos);
ocfmRetCode IfSubIndexExists(int NodeID, ENodeType NodeType, char* IndexID, char* SubIndexID, int* SubIndexPos, int* IndexPos);

ocfmRetCode GetIndexAttributes(int NodeID, ENodeType NodeType, char* IndexID, EAttributeType AttributeType, char* Out_AttributeValue);
ocfmRetCode GetSubIndexAttributes(int NodeID, ENodeType NodeType, char* IndexID, char* SubIndexID, EAttributeType AttributeType, char* Out_AttributeValue);
ocfmRetCode GetNodeCount(int MNID, int* Out_NodeCount);
ocfmRetCode GetIndexCount(int NodeID, ENodeType NodeType, int* Out_IndexCount);
ocfmRetCode GetSubIndexCount(int NodeID, ENodeType NodeType, char* IndexID, int* Out_SubIndexCount);

ocfmRetCode GetNodeAttributesbyNodePos(int NodePos, int* Out_NodeID, char* Out_NodeName);
ocfmRetCode GetIndexIDbyIndexPos(int NodeID, ENodeType NodeType, int IndexPos, char* Out_IndexID);
ocfmRetCode GetSubIndexIDbySubIndexPos(int NodeID, ENodeType NodeType, char* IndexID, int SubIndexPos, char* Out_SubIndexID);

ocfmRetCode GetIndexIDbyPositions(int NodePos, int IndexPos, char* Out_IndexID);
ocfmRetCode GetSubIndexIDbyPositions(int NodePos, int IndexPos, int SubIndexPos, char* Out_SubIndexID);
ocfmRetCode GetIndexAttributesbyPositions(int NodePos, int IndexPos, EAttributeType AttributeType, char* Out_AttributeValue);
ocfmRetCode GetSubIndexAttributesbyPositions(int NodePos, int IndexPos, int SubIndexPos, EAttributeType AttributeType, char* Out_AttributeValue);

void LoadObjectDictionary(char* fileName);
ocfmRetCode GenerateMNOBD();

ocfmRetCode SetALLIndexAttributes(int NodeID, ENodeType NodeType, 
char* IndexID, char* ActualValue,
char* IndexName, char* Access, char* dataTypeValue,
char* pdoMappingVal, char* defaultValue, char* highLimit,
char* lowLimit, char* objType, EFlag flagIfIncludedInCdc);

ocfmRetCode SetALLSubIndexAttributes(int NodeID, ENodeType NodeType, 
char* IndexID, char* SubIndexID, char* ActualValue,
char* IndexName, char* Access, char* dataTypeValue,
char* pdoMappingVal, char* defaultValue, char* highLimit,
char* lowLimit, char* objType, EFlag flagIfIncludedInCdc);

ocfmRetCode GetProjectSettings(EAutoGenerate* autoGen, EAutoSave* autoSave);
ocfmRetCode SetProjectSettings(EAutoGenerate autoGen, EAutoSave autoSave);

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_new_charp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_charp ") == TCL_ERROR) SWIG_fail;
  result = (char *)new_charp();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_copy_charp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:copy_charp value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "copy_charp" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  result = (char *)copy_charp(arg1);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_charp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_charp self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_charp" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  delete_charp(arg1);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_charp_assign(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:charp_assign self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charp_assign" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "charp_assign" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  charp_assign(arg1,arg2);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_charp_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:charp_value self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "charp_value" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (char)charp_value(arg1);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_longp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_longp ") == TCL_ERROR) SWIG_fail;
  result = (long *)new_longp();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_long,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_copy_longp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:copy_longp value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "copy_longp" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  result = (long *)copy_longp(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_long,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_longp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long *arg1 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_longp self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_longp" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  delete_longp(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_longp_assign(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long *arg1 = (long *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:longp_assign self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "longp_assign" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "longp_assign" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  longp_assign(arg1,arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_longp_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long *arg1 = (long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:longp_value self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "longp_value" "', argument " "1"" of type '" "long *""'"); 
  }
  arg1 = reinterpret_cast< long * >(argp1);
  result = (long)longp_value(arg1);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_intp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_intp ") == TCL_ERROR) SWIG_fail;
  result = (int *)new_intp();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_copy_intp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:copy_intp value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "copy_intp" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int *)copy_intp(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_intp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_intp self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intp" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  delete_intp(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_intp_assign(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:intp_assign self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intp_assign" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intp_assign" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  intp_assign(arg1,arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_intp_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:intp_value self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intp_value" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  result = (int)intp_value(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_boolp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_boolp ") == TCL_ERROR) SWIG_fail;
  result = (bool *)new_boolp();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_bool,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_copy_boolp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:copy_boolp value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "copy_boolp" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool *)copy_boolp(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_bool,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_boolp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool *arg1 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_boolp self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_boolp" "', argument " "1"" of type '" "bool *""'"); 
  }
  arg1 = reinterpret_cast< bool * >(argp1);
  delete_boolp(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_boolp_assign(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool *arg1 = (bool *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:boolp_assign self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boolp_assign" "', argument " "1"" of type '" "bool *""'"); 
  }
  arg1 = reinterpret_cast< bool * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boolp_assign" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  boolp_assign(arg1,arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_boolp_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool *arg1 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:boolp_value self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boolp_value" "', argument " "1"" of type '" "bool *""'"); 
  }
  arg1 = reinterpret_cast< bool * >(argp1);
  result = (bool)boolp_value(arg1);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_EAutoGeneratep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoGenerate *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_EAutoGeneratep ") == TCL_ERROR) SWIG_fail;
  result = (EAutoGenerate *)new_EAutoGeneratep();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_EAutoGenerate,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_copy_EAutoGeneratep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoGenerate arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  EAutoGenerate *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:copy_EAutoGeneratep value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "copy_EAutoGeneratep" "', argument " "1"" of type '" "EAutoGenerate""'");
  } 
  arg1 = static_cast< EAutoGenerate >(val1);
  result = (EAutoGenerate *)copy_EAutoGeneratep(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_EAutoGenerate,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_EAutoGeneratep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoGenerate *arg1 = (EAutoGenerate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_EAutoGeneratep self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_EAutoGenerate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EAutoGeneratep" "', argument " "1"" of type '" "EAutoGenerate *""'"); 
  }
  arg1 = reinterpret_cast< EAutoGenerate * >(argp1);
  delete_EAutoGeneratep(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EAutoGeneratep_assign(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoGenerate *arg1 = (EAutoGenerate *) 0 ;
  EAutoGenerate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:EAutoGeneratep_assign self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_EAutoGenerate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EAutoGeneratep_assign" "', argument " "1"" of type '" "EAutoGenerate *""'"); 
  }
  arg1 = reinterpret_cast< EAutoGenerate * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EAutoGeneratep_assign" "', argument " "2"" of type '" "EAutoGenerate""'");
  } 
  arg2 = static_cast< EAutoGenerate >(val2);
  EAutoGeneratep_assign(arg1,arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EAutoGeneratep_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoGenerate *arg1 = (EAutoGenerate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EAutoGenerate result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:EAutoGeneratep_value self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_EAutoGenerate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EAutoGeneratep_value" "', argument " "1"" of type '" "EAutoGenerate *""'"); 
  }
  arg1 = reinterpret_cast< EAutoGenerate * >(argp1);
  result = (EAutoGenerate)EAutoGeneratep_value(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_EAutoSavep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoSave *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_EAutoSavep ") == TCL_ERROR) SWIG_fail;
  result = (EAutoSave *)new_EAutoSavep();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_EAutoSave,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_copy_EAutoSavep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoSave arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  EAutoSave *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:copy_EAutoSavep value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "copy_EAutoSavep" "', argument " "1"" of type '" "EAutoSave""'");
  } 
  arg1 = static_cast< EAutoSave >(val1);
  result = (EAutoSave *)copy_EAutoSavep(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_EAutoSave,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_EAutoSavep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoSave *arg1 = (EAutoSave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_EAutoSavep self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_EAutoSave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EAutoSavep" "', argument " "1"" of type '" "EAutoSave *""'"); 
  }
  arg1 = reinterpret_cast< EAutoSave * >(argp1);
  delete_EAutoSavep(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EAutoSavep_assign(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoSave *arg1 = (EAutoSave *) 0 ;
  EAutoSave arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:EAutoSavep_assign self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_EAutoSave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EAutoSavep_assign" "', argument " "1"" of type '" "EAutoSave *""'"); 
  }
  arg1 = reinterpret_cast< EAutoSave * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EAutoSavep_assign" "', argument " "2"" of type '" "EAutoSave""'");
  } 
  arg2 = static_cast< EAutoSave >(val2);
  EAutoSavep_assign(arg1,arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EAutoSavep_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoSave *arg1 = (EAutoSave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EAutoSave result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:EAutoSavep_value self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_EAutoSave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EAutoSavep_value" "', argument " "1"" of type '" "EAutoSave *""'"); 
  }
  arg1 = reinterpret_cast< EAutoSave * >(argp1);
  result = (EAutoSave)EAutoSavep_value(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CApplicationProcess(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CApplicationProcess ") == TCL_ERROR) SWIG_fail;
  result = (CApplicationProcess *)new CApplicationProcess();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CApplicationProcess,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CApplicationProcess(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CApplicationProcess self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CApplicationProcess" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_XDDfilename_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_XDDfilename_set self XDDfilename ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_XDDfilename_set" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_XDDfilename_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->XDDfilename) delete[] arg1->XDDfilename;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->XDDfilename = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->XDDfilename = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_XDDfilename_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CApplicationProcess_XDDfilename_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_XDDfilename_get" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  result = (char *) ((arg1)->XDDfilename);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_ProjectPath_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_ProjectPath_set self ProjectPath ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_ProjectPath_set" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_ProjectPath_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->ProjectPath) delete[] arg1->ProjectPath;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->ProjectPath = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->ProjectPath = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_ProjectPath_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CApplicationProcess_ProjectPath_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_ProjectPath_get" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  result = (char *) ((arg1)->ProjectPath);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_CDTCollection_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  TCollection< CComplexDataType > *arg2 = (TCollection< CComplexDataType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_CDTCollection_set self CDTCollection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_CDTCollection_set" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_TCollectionT_CComplexDataType_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_CDTCollection_set" "', argument " "2"" of type '" "TCollection< CComplexDataType > *""'"); 
  }
  arg2 = reinterpret_cast< TCollection< CComplexDataType > * >(argp2);
  if (arg1) (arg1)->CDTCollection = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_CDTCollection_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TCollection< CComplexDataType > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CApplicationProcess_CDTCollection_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_CDTCollection_get" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  result = (TCollection< CComplexDataType > *)& ((arg1)->CDTCollection);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TCollectionT_CComplexDataType_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_ParameterCollection_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  TCollection< Parameter > *arg2 = (TCollection< Parameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_ParameterCollection_set self ParameterCollection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_ParameterCollection_set" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_TCollectionT_Parameter_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_ParameterCollection_set" "', argument " "2"" of type '" "TCollection< Parameter > *""'"); 
  }
  arg2 = reinterpret_cast< TCollection< Parameter > * >(argp2);
  if (arg1) (arg1)->ParameterCollection = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_ParameterCollection_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TCollection< Parameter > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CApplicationProcess_ParameterCollection_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_ParameterCollection_get" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  result = (TCollection< Parameter > *)& ((arg1)->ParameterCollection);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TCollectionT_Parameter_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_ParseXDDfile(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_ParseXDDfile self filename ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_ParseXDDfile" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_ParseXDDfile" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->ParseXDDfile(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_checkFileStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_checkFileStatus self filename ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_checkFileStatus" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_checkFileStatus" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->checkFileStatus(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_addComplexDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  CComplexDataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_addComplexDataType self complexDT ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_addComplexDataType" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CComplexDataType,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_addComplexDataType" "', argument " "2"" of type '" "CComplexDataType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CApplicationProcess_addComplexDataType" "', argument " "2"" of type '" "CComplexDataType""'");
    } else {
      arg2 = *(reinterpret_cast< CComplexDataType * >(argp2));
    }
  }
  (arg1)->addComplexDataType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_addParameter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  Parameter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_addParameter self parameter ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_addParameter" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Parameter,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_addParameter" "', argument " "2"" of type '" "Parameter""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CApplicationProcess_addParameter" "', argument " "2"" of type '" "Parameter""'");
    } else {
      arg2 = *(reinterpret_cast< Parameter * >(argp2));
    }
  }
  (arg1)->addParameter(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_get_ParameterIndexby_UniqueIDRef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_get_ParameterIndexby_UniqueIDRef self UniqueIdRef ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_get_ParameterIndexby_UniqueIDRef" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_get_ParameterIndexby_UniqueIDRef" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->get_ParameterIndexby_UniqueIDRef(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_get_Parameterby_UniqueIDRef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Parameter *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_get_Parameterby_UniqueIDRef self UniqueIdRef ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_get_Parameterby_UniqueIDRef" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_get_Parameterby_UniqueIDRef" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (Parameter *)(arg1)->get_Parameterby_UniqueIDRef(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Parameter,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_getCDTbyUniqueID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  CComplexDataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_getCDTbyUniqueID self UniqueId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_getCDTbyUniqueID" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_getCDTbyUniqueID" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (CComplexDataType *)(arg1)->getCDTbyUniqueID(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CComplexDataType,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_getCDTbydt_UniqueRefID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  CComplexDataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_getCDTbydt_UniqueRefID self UniqueRefId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_getCDTbydt_UniqueRefID" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_getCDTbydt_UniqueRefID" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (CComplexDataType *)(arg1)->getCDTbydt_UniqueRefID(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CComplexDataType,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_getCDTbydtIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CComplexDataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_getCDTbydtIndex self Index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_getCDTbydtIndex" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CApplicationProcess_getCDTbydtIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (CComplexDataType *)(arg1)->getCDTbydtIndex(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CComplexDataType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_get_CDT_UniqueIDRef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_get_CDT_UniqueIDRef self UniqueIdRef ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_get_CDT_UniqueIDRef" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_get_CDT_UniqueIDRef" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->get_CDT_UniqueIDRef(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_updatePreviousCDT_UId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CApplicationProcess_updatePreviousCDT_UId self UniqueID Index ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_updatePreviousCDT_UId" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CApplicationProcess_updatePreviousCDT_UId" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CApplicationProcess_updatePreviousCDT_UId" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->updatePreviousCDT_UId(arg2,arg3);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_get_UniqueIDRef_by_ParameterIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Parameter result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_get_UniqueIDRef_by_ParameterIndex self ParameterIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_get_UniqueIDRef_by_ParameterIndex" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CApplicationProcess_get_UniqueIDRef_by_ParameterIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->get_UniqueIDRef_by_ParameterIndex(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Parameter(static_cast< const Parameter& >(result))), SWIGTYPE_p_Parameter, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_getCDTCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CApplicationProcess_getCDTCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_getCDTCount" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  result = (int)(arg1)->getCDTCount();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CApplicationProcess_getCDTbyCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CApplicationProcess *arg1 = (CApplicationProcess *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CComplexDataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CApplicationProcess_getCDTbyCount self count ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CApplicationProcess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CApplicationProcess_getCDTbyCount" "', argument " "1"" of type '" "CApplicationProcess *""'"); 
  }
  arg1 = reinterpret_cast< CApplicationProcess * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CApplicationProcess_getCDTbyCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (CComplexDataType *)(arg1)->getCDTbyCount(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CComplexDataType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CApplicationProcess(void *obj) {
CApplicationProcess *arg1 = (CApplicationProcess *) obj;
delete arg1;
}
static swig_method swig_CApplicationProcess_methods[] = {
    {"ParseXDDfile", _wrap_CApplicationProcess_ParseXDDfile}, 
    {"checkFileStatus", _wrap_CApplicationProcess_checkFileStatus}, 
    {"addComplexDataType", _wrap_CApplicationProcess_addComplexDataType}, 
    {"addParameter", _wrap_CApplicationProcess_addParameter}, 
    {"get_ParameterIndexby_UniqueIDRef", _wrap_CApplicationProcess_get_ParameterIndexby_UniqueIDRef}, 
    {"get_Parameterby_UniqueIDRef", _wrap_CApplicationProcess_get_Parameterby_UniqueIDRef}, 
    {"getCDTbyUniqueID", _wrap_CApplicationProcess_getCDTbyUniqueID}, 
    {"getCDTbydt_UniqueRefID", _wrap_CApplicationProcess_getCDTbydt_UniqueRefID}, 
    {"getCDTbydtIndex", _wrap_CApplicationProcess_getCDTbydtIndex}, 
    {"get_CDT_UniqueIDRef", _wrap_CApplicationProcess_get_CDT_UniqueIDRef}, 
    {"updatePreviousCDT_UId", _wrap_CApplicationProcess_updatePreviousCDT_UId}, 
    {"get_UniqueIDRef_by_ParameterIndex", _wrap_CApplicationProcess_get_UniqueIDRef_by_ParameterIndex}, 
    {"getCDTCount", _wrap_CApplicationProcess_getCDTCount}, 
    {"getCDTbyCount", _wrap_CApplicationProcess_getCDTbyCount}, 
    {0,0}
};
static swig_attribute swig_CApplicationProcess_attributes[] = {
    { "-XDDfilename",_wrap_CApplicationProcess_XDDfilename_get, _wrap_CApplicationProcess_XDDfilename_set},
    { "-ProjectPath",_wrap_CApplicationProcess_ProjectPath_get, _wrap_CApplicationProcess_ProjectPath_set},
    { "-CDTCollection",_wrap_CApplicationProcess_CDTCollection_get, _wrap_CApplicationProcess_CDTCollection_set},
    { "-ParameterCollection",_wrap_CApplicationProcess_ParameterCollection_get, _wrap_CApplicationProcess_ParameterCollection_set},
    {0,0,0}
};
static swig_class *swig_CApplicationProcess_bases[] = {0};
static const char * swig_CApplicationProcess_base_names[] = {0};
static swig_class _wrap_class_CApplicationProcess = { "CApplicationProcess", &SWIGTYPE_p_CApplicationProcess,_wrap_new_CApplicationProcess, swig_delete_CApplicationProcess, swig_CApplicationProcess_methods, swig_CApplicationProcess_attributes, swig_CApplicationProcess_bases,swig_CApplicationProcess_base_names, &swig_module };
SWIGINTERN int
_wrap_new_CBaseIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CBaseIndex ") == TCL_ERROR) SWIG_fail;
  result = (CBaseIndex *)new CBaseIndex();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CBaseIndex,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CBaseIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CBaseIndex self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CBaseIndex" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getName" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getName();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setName self Name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setName" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setName(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getIndexValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getIndexValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getIndexValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getIndexValue();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setIndexValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setIndexValue self Index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setIndexValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setIndexValue" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setIndexValue(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getDefaultValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getDefaultValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getDefaultValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getDefaultValue();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setDefaultValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setDefaultValue self Value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setDefaultValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setDefaultValue" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setDefaultValue(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getActualValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getActualValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getActualValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getActualValue();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setActualValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setActualValue self Value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setActualValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setActualValue" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setActualValue(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getAccessType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getAccessType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getAccessType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getAccessType();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setAccessType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setAccessType self Access ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setAccessType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setAccessType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setAccessType(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getLowLimit(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getLowLimit self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getLowLimit" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getLowLimit();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setLowLimit(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setLowLimit self LowLimit ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setLowLimit" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setLowLimit" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setLowLimit(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getHighLimit(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getHighLimit self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getHighLimit" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getHighLimit();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setHighLimit(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setHighLimit self HighLimit ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setHighLimit" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setHighLimit" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setHighLimit(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DataType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getDataType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getDataType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (arg1)->getDataType();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new DataType(static_cast< const DataType& >(result))), SWIGTYPE_p_DataType, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setDataType__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setDataType self dataTypeValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setDataType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setDataType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setDataType(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setDataType__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CBaseIndex_setDataType self dataTypeName NodeID ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setDataType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setDataType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CBaseIndex_setDataType" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setDataType(arg2,arg3);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CBaseIndex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CBaseIndex_setDataType__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CBaseIndex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CBaseIndex_setDataType__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'CBaseIndex_setDataType'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getPDOMapping(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getPDOMapping self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getPDOMapping" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getPDOMapping();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setPDOMapping(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setPDOMapping self pdoMappingValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setPDOMapping" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setPDOMapping" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setPDOMapping(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getObjectType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getObjectType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getObjectType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getObjectType();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getEObjectType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EObjectType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getEObjectType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getEObjectType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (EObjectType)(arg1)->getEObjectType();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setObjectType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setObjectType self objectType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setObjectType" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setObjectType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setObjectType(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getNodeID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getNodeID self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getNodeID" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (int)(arg1)->getNodeID();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setNodeID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setNodeID self NodeID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setNodeID" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CBaseIndex_setNodeID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setNodeID(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_IsIndexVaueValid(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_IsIndexVaueValid self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_IsIndexVaueValid" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_IsIndexVaueValid" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->IsIndexVaueValid(arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_SaveChanges(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CBaseIndex_SaveChanges self Name Value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_SaveChanges" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_SaveChanges" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CBaseIndex_SaveChanges" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->SaveChanges(arg2,arg3);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getUniqueIDRef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getUniqueIDRef self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getUniqueIDRef" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getUniqueIDRef();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setUniqueIDRef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setUniqueIDRef self UniqueID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setUniqueIDRef" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setUniqueIDRef" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setUniqueIDRef(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getDataTypeValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getDataTypeValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getDataTypeValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (char *)(arg1)->getDataTypeValue();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setDataTypeValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setDataTypeValue self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setDataTypeValue" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setDataTypeValue" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setDataTypeValue(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_getFlagIfIncludedCdc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EFlag result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CBaseIndex_getFlagIfIncludedCdc self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_getFlagIfIncludedCdc" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  result = (EFlag)(arg1)->getFlagIfIncludedCdc();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setFlagIfIncludedCdc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  EFlag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setFlagIfIncludedCdc self flag ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setFlagIfIncludedCdc" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CBaseIndex_setFlagIfIncludedCdc" "', argument " "2"" of type '" "EFlag""'");
  } 
  arg2 = static_cast< EFlag >(val2);
  (arg1)->setFlagIfIncludedCdc(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CBaseIndex_setDataTypeST(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CBaseIndex *arg1 = (CBaseIndex *) 0 ;
  DataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CBaseIndex_setDataTypeST self dt ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CBaseIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBaseIndex_setDataTypeST" "', argument " "1"" of type '" "CBaseIndex *""'"); 
  }
  arg1 = reinterpret_cast< CBaseIndex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_DataType,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBaseIndex_setDataTypeST" "', argument " "2"" of type '" "DataType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CBaseIndex_setDataTypeST" "', argument " "2"" of type '" "DataType""'");
    } else {
      arg2 = *(reinterpret_cast< DataType * >(argp2));
    }
  }
  (arg1)->setDataTypeST(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CBaseIndex(void *obj) {
CBaseIndex *arg1 = (CBaseIndex *) obj;
delete arg1;
}
static swig_method swig_CBaseIndex_methods[] = {
    {"getName", _wrap_CBaseIndex_getName}, 
    {"setName", _wrap_CBaseIndex_setName}, 
    {"getIndexValue", _wrap_CBaseIndex_getIndexValue}, 
    {"setIndexValue", _wrap_CBaseIndex_setIndexValue}, 
    {"getDefaultValue", _wrap_CBaseIndex_getDefaultValue}, 
    {"setDefaultValue", _wrap_CBaseIndex_setDefaultValue}, 
    {"getActualValue", _wrap_CBaseIndex_getActualValue}, 
    {"setActualValue", _wrap_CBaseIndex_setActualValue}, 
    {"getAccessType", _wrap_CBaseIndex_getAccessType}, 
    {"setAccessType", _wrap_CBaseIndex_setAccessType}, 
    {"getLowLimit", _wrap_CBaseIndex_getLowLimit}, 
    {"setLowLimit", _wrap_CBaseIndex_setLowLimit}, 
    {"getHighLimit", _wrap_CBaseIndex_getHighLimit}, 
    {"setHighLimit", _wrap_CBaseIndex_setHighLimit}, 
    {"getDataType", _wrap_CBaseIndex_getDataType}, 
    {"setDataType", _wrap_CBaseIndex_setDataType}, 
    {"getPDOMapping", _wrap_CBaseIndex_getPDOMapping}, 
    {"setPDOMapping", _wrap_CBaseIndex_setPDOMapping}, 
    {"getObjectType", _wrap_CBaseIndex_getObjectType}, 
    {"getEObjectType", _wrap_CBaseIndex_getEObjectType}, 
    {"setObjectType", _wrap_CBaseIndex_setObjectType}, 
    {"getNodeID", _wrap_CBaseIndex_getNodeID}, 
    {"setNodeID", _wrap_CBaseIndex_setNodeID}, 
    {"IsIndexVaueValid", _wrap_CBaseIndex_IsIndexVaueValid}, 
    {"SaveChanges", _wrap_CBaseIndex_SaveChanges}, 
    {"getUniqueIDRef", _wrap_CBaseIndex_getUniqueIDRef}, 
    {"setUniqueIDRef", _wrap_CBaseIndex_setUniqueIDRef}, 
    {"getDataTypeValue", _wrap_CBaseIndex_getDataTypeValue}, 
    {"setDataTypeValue", _wrap_CBaseIndex_setDataTypeValue}, 
    {"getFlagIfIncludedCdc", _wrap_CBaseIndex_getFlagIfIncludedCdc}, 
    {"setFlagIfIncludedCdc", _wrap_CBaseIndex_setFlagIfIncludedCdc}, 
    {"setDataTypeST", _wrap_CBaseIndex_setDataTypeST}, 
    {0,0}
};
static swig_attribute swig_CBaseIndex_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CBaseIndex_bases[] = {0};
static const char * swig_CBaseIndex_base_names[] = {0};
static swig_class _wrap_class_CBaseIndex = { "CBaseIndex", &SWIGTYPE_p_CBaseIndex,_wrap_new_CBaseIndex, swig_delete_CBaseIndex, swig_CBaseIndex_methods, swig_CBaseIndex_attributes, swig_CBaseIndex_bases,swig_CBaseIndex_base_names, &swig_module };
SWIGINTERN int
_wrap_new_CComplexDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CComplexDataType ") == TCL_ERROR) SWIG_fail;
  result = (CComplexDataType *)new CComplexDataType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CComplexDataType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CComplexDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CComplexDataType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CComplexDataType" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_varCollection_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  TCollection< varDeclaration > *arg2 = (TCollection< varDeclaration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CComplexDataType_varCollection_set self varCollection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_varCollection_set" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_TCollectionT_varDeclaration_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CComplexDataType_varCollection_set" "', argument " "2"" of type '" "TCollection< varDeclaration > *""'"); 
  }
  arg2 = reinterpret_cast< TCollection< varDeclaration > * >(argp2);
  if (arg1) (arg1)->varCollection = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_varCollection_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TCollection< varDeclaration > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CComplexDataType_varCollection_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_varCollection_get" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  result = (TCollection< varDeclaration > *)& ((arg1)->varCollection);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TCollectionT_varDeclaration_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_VarIndex_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CComplexDataType_VarIndex_set self VarIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_VarIndex_set" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CComplexDataType_VarIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->VarIndex = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_VarIndex_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CComplexDataType_VarIndex_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_VarIndex_get" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  result = (int) ((arg1)->VarIndex);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_Index_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CComplexDataType_Index_set self Index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_Index_set" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CComplexDataType_Index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Index = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_Index_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CComplexDataType_Index_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_Index_get" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  result = (int) ((arg1)->Index);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_previousCDT_UId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CComplexDataType_previousCDT_UId_set self previousCDT_UId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_previousCDT_UId_set" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CComplexDataType_previousCDT_UId_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->previousCDT_UId) delete[] arg1->previousCDT_UId;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->previousCDT_UId = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->previousCDT_UId = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_previousCDT_UId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CComplexDataType_previousCDT_UId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_previousCDT_UId_get" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  result = (char *) ((arg1)->previousCDT_UId);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_name_id_attr_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  appProcessCommon *arg2 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CComplexDataType_name_id_attr_set self name_id_attr ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_name_id_attr_set" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_appProcessCommon, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CComplexDataType_name_id_attr_set" "', argument " "2"" of type '" "appProcessCommon *""'"); 
  }
  arg2 = reinterpret_cast< appProcessCommon * >(argp2);
  if (arg1) (arg1)->name_id_attr = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_name_id_attr_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  appProcessCommon *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CComplexDataType_name_id_attr_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_name_id_attr_get" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  result = (appProcessCommon *) ((arg1)->name_id_attr);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_appProcessCommon,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CComplexDataType_addVarDeclaration(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CComplexDataType *arg1 = (CComplexDataType *) 0 ;
  varDeclaration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CComplexDataType_addVarDeclaration self VarDecl ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CComplexDataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CComplexDataType_addVarDeclaration" "', argument " "1"" of type '" "CComplexDataType *""'"); 
  }
  arg1 = reinterpret_cast< CComplexDataType * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_varDeclaration,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CComplexDataType_addVarDeclaration" "', argument " "2"" of type '" "varDeclaration""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CComplexDataType_addVarDeclaration" "', argument " "2"" of type '" "varDeclaration""'");
    } else {
      arg2 = *(reinterpret_cast< varDeclaration * >(argp2));
    }
  }
  (arg1)->addVarDeclaration(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CComplexDataType(void *obj) {
CComplexDataType *arg1 = (CComplexDataType *) obj;
delete arg1;
}
static swig_method swig_CComplexDataType_methods[] = {
    {"addVarDeclaration", _wrap_CComplexDataType_addVarDeclaration}, 
    {0,0}
};
static swig_attribute swig_CComplexDataType_attributes[] = {
    { "-varCollection",_wrap_CComplexDataType_varCollection_get, _wrap_CComplexDataType_varCollection_set},
    { "-VarIndex",_wrap_CComplexDataType_VarIndex_get, _wrap_CComplexDataType_VarIndex_set},
    { "-Index",_wrap_CComplexDataType_Index_get, _wrap_CComplexDataType_Index_set},
    { "-previousCDT_UId",_wrap_CComplexDataType_previousCDT_UId_get, _wrap_CComplexDataType_previousCDT_UId_set},
    { "-name_id_attr",_wrap_CComplexDataType_name_id_attr_get, _wrap_CComplexDataType_name_id_attr_set},
    {0,0,0}
};
static swig_class *swig_CComplexDataType_bases[] = {0};
static const char * swig_CComplexDataType_base_names[] = {0};
static swig_class _wrap_class_CComplexDataType = { "CComplexDataType", &SWIGTYPE_p_CComplexDataType,_wrap_new_CComplexDataType, swig_delete_CComplexDataType, swig_CComplexDataType_methods, swig_CComplexDataType_attributes, swig_CComplexDataType_bases,swig_CComplexDataType_base_names, &swig_module };
SWIGINTERN int
_wrap_ocfmRetCode_code_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetCode *arg1 = (ocfmRetCode *) 0 ;
  EConfiuguratorErrors arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ocfmRetCode_code_set self code ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetCode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetCode_code_set" "', argument " "1"" of type '" "ocfmRetCode *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetCode * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ocfmRetCode_code_set" "', argument " "2"" of type '" "EConfiuguratorErrors""'");
  } 
  arg2 = static_cast< EConfiuguratorErrors >(val2);
  if (arg1) (arg1)->code = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ocfmRetCode_code_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetCode *arg1 = (ocfmRetCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EConfiuguratorErrors result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ocfmRetCode_code_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetCode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetCode_code_get" "', argument " "1"" of type '" "ocfmRetCode *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetCode * >(argp1);
  result = (EConfiuguratorErrors) ((arg1)->code);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ocfmRetCode_errorString_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetCode *arg1 = (ocfmRetCode *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ocfmRetCode_errorString_set self errorString ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetCode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetCode_errorString_set" "', argument " "1"" of type '" "ocfmRetCode *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetCode * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ocfmRetCode_errorString_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->errorString) delete[] arg1->errorString;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->errorString = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->errorString = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ocfmRetCode_errorString_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetCode *arg1 = (ocfmRetCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ocfmRetCode_errorString_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetCode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetCode_errorString_get" "', argument " "1"" of type '" "ocfmRetCode *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetCode * >(argp1);
  result = (char *) ((arg1)->errorString);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ocfmRetCode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetCode *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ocfmRetCode ") == TCL_ERROR) SWIG_fail;
  result = (ocfmRetCode *)new ocfmRetCode();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ocfmRetCode,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ocfmRetCode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetCode *arg1 = (ocfmRetCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ocfmRetCode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ocfmRetCode" "', argument " "1"" of type '" "ocfmRetCode *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetCode * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ocfmRetCode(void *obj) {
ocfmRetCode *arg1 = (ocfmRetCode *) obj;
delete arg1;
}
static swig_method swig_ocfmRetCode_methods[] = {
    {0,0}
};
static swig_attribute swig_ocfmRetCode_attributes[] = {
    { "-code",_wrap_ocfmRetCode_code_get, _wrap_ocfmRetCode_code_set},
    { "-errorString",_wrap_ocfmRetCode_errorString_get, _wrap_ocfmRetCode_errorString_set},
    {0,0,0}
};
static swig_class *swig_ocfmRetCode_bases[] = {0};
static const char * swig_ocfmRetCode_base_names[] = {0};
static swig_class _wrap_class_ocfmRetCode = { "ocfmRetCode", &SWIGTYPE_p_ocfmRetCode,_wrap_new_ocfmRetCode, swig_delete_ocfmRetCode, swig_ocfmRetCode_methods, swig_ocfmRetCode_attributes, swig_ocfmRetCode_bases,swig_ocfmRetCode_base_names, &swig_module };
SWIGINTERN int
_wrap_ocfmRetValError_errCode_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetValError *arg1 = (ocfmRetValError *) 0 ;
  ocfmRetCode *arg2 = (ocfmRetCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ocfmRetValError_errCode_set self errCode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetValError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetValError_errCode_set" "', argument " "1"" of type '" "ocfmRetValError *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetValError * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_ocfmRetCode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ocfmRetValError_errCode_set" "', argument " "2"" of type '" "ocfmRetCode *""'"); 
  }
  arg2 = reinterpret_cast< ocfmRetCode * >(argp2);
  if (arg1) (arg1)->errCode = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ocfmRetValError_errCode_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetValError *arg1 = (ocfmRetValError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ocfmRetCode *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ocfmRetValError_errCode_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetValError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetValError_errCode_get" "', argument " "1"" of type '" "ocfmRetValError *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetValError * >(argp1);
  result = (ocfmRetCode *)& ((arg1)->errCode);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ocfmRetCode,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ocfmRetValError_returnValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetValError *arg1 = (ocfmRetValError *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ocfmRetValError_returnValue_set self returnValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetValError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetValError_returnValue_set" "', argument " "1"" of type '" "ocfmRetValError *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetValError * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ocfmRetValError_returnValue_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->returnValue = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ocfmRetValError_returnValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetValError *arg1 = (ocfmRetValError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ocfmRetValError_returnValue_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetValError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ocfmRetValError_returnValue_get" "', argument " "1"" of type '" "ocfmRetValError *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetValError * >(argp1);
  result = (int) ((arg1)->returnValue);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ocfmRetValError(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetValError *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ocfmRetValError ") == TCL_ERROR) SWIG_fail;
  result = (ocfmRetValError *)new ocfmRetValError();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ocfmRetValError,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ocfmRetValError(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetValError *arg1 = (ocfmRetValError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ocfmRetValError self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ocfmRetValError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ocfmRetValError" "', argument " "1"" of type '" "ocfmRetValError *""'"); 
  }
  arg1 = reinterpret_cast< ocfmRetValError * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ocfmRetValError(void *obj) {
ocfmRetValError *arg1 = (ocfmRetValError *) obj;
delete arg1;
}
static swig_method swig_ocfmRetValError_methods[] = {
    {0,0}
};
static swig_attribute swig_ocfmRetValError_attributes[] = {
    { "-errCode",_wrap_ocfmRetValError_errCode_get, _wrap_ocfmRetValError_errCode_set},
    { "-returnValue",_wrap_ocfmRetValError_returnValue_get, _wrap_ocfmRetValError_returnValue_set},
    {0,0,0}
};
static swig_class *swig_ocfmRetValError_bases[] = {0};
static const char * swig_ocfmRetValError_base_names[] = {0};
static swig_class _wrap_class_ocfmRetValError = { "ocfmRetValError", &SWIGTYPE_p_ocfmRetValError,_wrap_new_ocfmRetValError, swig_delete_ocfmRetValError, swig_ocfmRetValError_methods, swig_ocfmRetValError_attributes, swig_ocfmRetValError_bases,swig_ocfmRetValError_base_names, &swig_module };
SWIGINTERN int
_wrap_new_CDataTypeCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CDataTypeCollection ") == TCL_ERROR) SWIG_fail;
  result = (CDataTypeCollection *)new CDataTypeCollection();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CDataTypeCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CDataTypeCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *arg1 = (CDataTypeCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CDataTypeCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CDataTypeCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CDataTypeCollection" "', argument " "1"" of type '" "CDataTypeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CDataTypeCollection * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CDataTypeCollection_addDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *arg1 = (CDataTypeCollection *) 0 ;
  DataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CDataTypeCollection_addDataType self objDataType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CDataTypeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDataTypeCollection_addDataType" "', argument " "1"" of type '" "CDataTypeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CDataTypeCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_DataType,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDataTypeCollection_addDataType" "', argument " "2"" of type '" "DataType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDataTypeCollection_addDataType" "', argument " "2"" of type '" "DataType""'");
    } else {
      arg2 = *(reinterpret_cast< DataType * >(argp2));
    }
  }
  (arg1)->addDataType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CDataTypeCollection_DeleteDataTypeCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *arg1 = (CDataTypeCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CDataTypeCollection_DeleteDataTypeCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CDataTypeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDataTypeCollection_DeleteDataTypeCollection" "', argument " "1"" of type '" "CDataTypeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CDataTypeCollection * >(argp1);
  (arg1)->DeleteDataTypeCollection();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CDataTypeCollection_getNumberOfDataTypes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *arg1 = (CDataTypeCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CDataTypeCollection_getNumberOfDataTypes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CDataTypeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDataTypeCollection_getNumberOfDataTypes" "', argument " "1"" of type '" "CDataTypeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CDataTypeCollection * >(argp1);
  result = (int)(arg1)->getNumberOfDataTypes();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CDataTypeCollection_getDataTypeElement(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *arg1 = (CDataTypeCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  DataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CDataTypeCollection_getDataTypeElement self DataTypeId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CDataTypeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDataTypeCollection_getDataTypeElement" "', argument " "1"" of type '" "CDataTypeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CDataTypeCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDataTypeCollection_getDataTypeElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DataType *)(arg1)->getDataTypeElement(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_DataType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CDataTypeCollection_getDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *arg1 = (CDataTypeCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  DataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CDataTypeCollection_getDataType self DataTypevalue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CDataTypeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDataTypeCollection_getDataType" "', argument " "1"" of type '" "CDataTypeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CDataTypeCollection * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDataTypeCollection_getDataType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (DataType *)(arg1)->getDataType(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_DataType,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CDataTypeCollection_getDataTypeByName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CDataTypeCollection *arg1 = (CDataTypeCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  DataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CDataTypeCollection_getDataTypeByName self DataTypeName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CDataTypeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDataTypeCollection_getDataTypeByName" "', argument " "1"" of type '" "CDataTypeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CDataTypeCollection * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDataTypeCollection_getDataTypeByName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (DataType *)(arg1)->getDataTypeByName(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_DataType,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CDataTypeCollection(void *obj) {
CDataTypeCollection *arg1 = (CDataTypeCollection *) obj;
delete arg1;
}
static swig_method swig_CDataTypeCollection_methods[] = {
    {"addDataType", _wrap_CDataTypeCollection_addDataType}, 
    {"DeleteDataTypeCollection", _wrap_CDataTypeCollection_DeleteDataTypeCollection}, 
    {"getNumberOfDataTypes", _wrap_CDataTypeCollection_getNumberOfDataTypes}, 
    {"getDataTypeElement", _wrap_CDataTypeCollection_getDataTypeElement}, 
    {"getDataType", _wrap_CDataTypeCollection_getDataType}, 
    {"getDataTypeByName", _wrap_CDataTypeCollection_getDataTypeByName}, 
    {0,0}
};
static swig_attribute swig_CDataTypeCollection_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CDataTypeCollection_bases[] = {0};
static const char * swig_CDataTypeCollection_base_names[] = {0};
static swig_class _wrap_class_CDataTypeCollection = { "CDataTypeCollection", &SWIGTYPE_p_CDataTypeCollection,_wrap_new_CDataTypeCollection, swig_delete_CDataTypeCollection, swig_CDataTypeCollection_methods, swig_CDataTypeCollection_attributes, swig_CDataTypeCollection_bases,swig_CDataTypeCollection_base_names, &swig_module };
SWIGINTERN const char *_wrap_MN_NODEID_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(MN_NODEID));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *swig_readonly(ClientData clientData SWIGUNUSED, Tcl_Interp *interp SWIGUNUSED, char *name1 SWIGUNUSED, char *name2 SWIGUNUSED, int flags SWIGUNUSED) {
  return "Variable is read-only";
}


SWIGINTERN const char *_wrap_OFFSET_INTEGER_8_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(OFFSET_INTEGER_8));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_OFFSET_UNSIGNED_INTEGER_8_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(OFFSET_UNSIGNED_INTEGER_8));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN int
_wrap_DataType_Name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DataType_Name_set self Name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_Name_set" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType_Name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->Name) delete[] arg1->Name;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->Name = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->Name = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_Name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DataType_Name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_Name_get" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  result = (char *) ((arg1)->Name);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_DataTypeValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DataType_DataTypeValue_set self DataTypeValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_DataTypeValue_set" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType_DataTypeValue_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->DataTypeValue) delete[] arg1->DataTypeValue;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->DataTypeValue = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->DataTypeValue = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_DataTypeValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DataType_DataTypeValue_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_DataTypeValue_get" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  result = (char *) ((arg1)->DataTypeValue);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_DataSize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DataType_DataSize_set self DataSize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_DataSize_set" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType_DataSize_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->DataSize) delete[] arg1->DataSize;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->DataSize = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->DataSize = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_DataSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DataType_DataSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_DataSize_get" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  result = (char *) ((arg1)->DataSize);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_IEC_dt_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  IEC_Datatype arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DataType_IEC_dt_set self IEC_dt ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_IEC_dt_set" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataType_IEC_dt_set" "', argument " "2"" of type '" "IEC_Datatype""'");
  } 
  arg2 = static_cast< IEC_Datatype >(val2);
  if (arg1) (arg1)->IEC_dt = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_IEC_dt_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IEC_Datatype result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DataType_IEC_dt_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_IEC_dt_get" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  result = (IEC_Datatype) ((arg1)->IEC_dt);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DataType_getName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_getName" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  result = (char *)(arg1)->getName();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DataType_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DataType_setName self DataTypeName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_setName" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType_setName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setName(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_DataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_DataType ") == TCL_ERROR) SWIG_fail;
  result = (DataType *)new DataType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_DataType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_DataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DataType *arg1 = (DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_DataType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_DataType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataType" "', argument " "1"" of type '" "DataType *""'"); 
  }
  arg1 = reinterpret_cast< DataType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_DataType(void *obj) {
DataType *arg1 = (DataType *) obj;
delete arg1;
}
static swig_method swig_DataType_methods[] = {
    {"getName", _wrap_DataType_getName}, 
    {"setName", _wrap_DataType_setName}, 
    {0,0}
};
static swig_attribute swig_DataType_attributes[] = {
    { "-Name",_wrap_DataType_Name_get, _wrap_DataType_Name_set},
    { "-DataTypeValue",_wrap_DataType_DataTypeValue_get, _wrap_DataType_DataTypeValue_set},
    { "-DataSize",_wrap_DataType_DataSize_get, _wrap_DataType_DataSize_set},
    { "-IEC_dt",_wrap_DataType_IEC_dt_get, _wrap_DataType_IEC_dt_set},
    {0,0,0}
};
static swig_class *swig_DataType_bases[] = {0};
static const char * swig_DataType_base_names[] = {0};
static swig_class _wrap_class_DataType = { "DataType", &SWIGTYPE_p_DataType,_wrap_new_DataType, swig_delete_DataType, swig_DataType_methods, swig_DataType_attributes, swig_DataType_bases,swig_DataType_base_names, &swig_module };
SWIGINTERN int
_wrap_appProcessCommon_m_Name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_m_Name_set self m_Name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_m_Name_set" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_m_Name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->m_Name) delete[] arg1->m_Name;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->m_Name = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->m_Name = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_m_Name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_m_Name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_m_Name_get" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *) ((arg1)->m_Name);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_UniqueId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_UniqueId_set self UniqueId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_UniqueId_set" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_UniqueId_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->UniqueId) delete[] arg1->UniqueId;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->UniqueId = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->UniqueId = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_UniqueId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_UniqueId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_UniqueId_get" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *) ((arg1)->UniqueId);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_dataType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_dataType_set self dataType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_dataType_set" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_dataType_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->dataType) delete[] arg1->dataType;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->dataType = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->dataType = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_dataType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_dataType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_dataType_get" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *) ((arg1)->dataType);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_dataTypeUniqueIDRef_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_dataTypeUniqueIDRef_set self dataTypeUniqueIDRef ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_dataTypeUniqueIDRef_set" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_dataTypeUniqueIDRef_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->dataTypeUniqueIDRef) delete[] arg1->dataTypeUniqueIDRef;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->dataTypeUniqueIDRef = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->dataTypeUniqueIDRef = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_dataTypeUniqueIDRef_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_dataTypeUniqueIDRef_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_dataTypeUniqueIDRef_get" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *) ((arg1)->dataTypeUniqueIDRef);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_getUniqueID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_getUniqueID self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_getUniqueID" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *)(arg1)->getUniqueID();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_setUniqueID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_setUniqueID self UniqueID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_setUniqueID" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_setUniqueID" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setUniqueID(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_getName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_getName" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *)(arg1)->getName();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_setName self attrname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_setName" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_setName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setName(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_getDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_getDataType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_getDataType" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *)(arg1)->getDataType();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_setDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_setDataType self dt ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_setDataType" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_setDataType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setDataType(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_getDtUniqueRefId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:appProcessCommon_getDtUniqueRefId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_getDtUniqueRefId" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  result = (char *)(arg1)->getDtUniqueRefId();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_appProcessCommon_setDtUniqueRefId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:appProcessCommon_setDtUniqueRefId self UniqueRefID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "appProcessCommon_setDtUniqueRefId" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "appProcessCommon_setDtUniqueRefId" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setDtUniqueRefId(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_appProcessCommon(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_appProcessCommon ") == TCL_ERROR) SWIG_fail;
  result = (appProcessCommon *)new appProcessCommon();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_appProcessCommon,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_appProcessCommon(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  appProcessCommon *arg1 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_appProcessCommon self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_appProcessCommon, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_appProcessCommon" "', argument " "1"" of type '" "appProcessCommon *""'"); 
  }
  arg1 = reinterpret_cast< appProcessCommon * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_appProcessCommon(void *obj) {
appProcessCommon *arg1 = (appProcessCommon *) obj;
delete arg1;
}
static swig_method swig_appProcessCommon_methods[] = {
    {"getUniqueID", _wrap_appProcessCommon_getUniqueID}, 
    {"setUniqueID", _wrap_appProcessCommon_setUniqueID}, 
    {"getName", _wrap_appProcessCommon_getName}, 
    {"setName", _wrap_appProcessCommon_setName}, 
    {"getDataType", _wrap_appProcessCommon_getDataType}, 
    {"setDataType", _wrap_appProcessCommon_setDataType}, 
    {"getDtUniqueRefId", _wrap_appProcessCommon_getDtUniqueRefId}, 
    {"setDtUniqueRefId", _wrap_appProcessCommon_setDtUniqueRefId}, 
    {0,0}
};
static swig_attribute swig_appProcessCommon_attributes[] = {
    { "-m_Name",_wrap_appProcessCommon_m_Name_get, _wrap_appProcessCommon_m_Name_set},
    { "-UniqueId",_wrap_appProcessCommon_UniqueId_get, _wrap_appProcessCommon_UniqueId_set},
    { "-dataType",_wrap_appProcessCommon_dataType_get, _wrap_appProcessCommon_dataType_set},
    { "-dataTypeUniqueIDRef",_wrap_appProcessCommon_dataTypeUniqueIDRef_get, _wrap_appProcessCommon_dataTypeUniqueIDRef_set},
    {0,0,0}
};
static swig_class *swig_appProcessCommon_bases[] = {0};
static const char * swig_appProcessCommon_base_names[] = {0};
static swig_class _wrap_class_appProcessCommon = { "appProcessCommon", &SWIGTYPE_p_appProcessCommon,_wrap_new_appProcessCommon, swig_delete_appProcessCommon, swig_appProcessCommon_methods, swig_appProcessCommon_attributes, swig_appProcessCommon_bases,swig_appProcessCommon_base_names, &swig_module };
SWIGINTERN int
_wrap_varDeclaration_nam_id_dt_attr_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  appProcessCommon *arg2 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:varDeclaration_nam_id_dt_attr_set self nam_id_dt_attr ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_nam_id_dt_attr_set" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_appProcessCommon, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "varDeclaration_nam_id_dt_attr_set" "', argument " "2"" of type '" "appProcessCommon *""'"); 
  }
  arg2 = reinterpret_cast< appProcessCommon * >(argp2);
  if (arg1) (arg1)->nam_id_dt_attr = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_nam_id_dt_attr_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  appProcessCommon *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:varDeclaration_nam_id_dt_attr_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_nam_id_dt_attr_get" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  result = (appProcessCommon *) ((arg1)->nam_id_dt_attr);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_appProcessCommon,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_size_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:varDeclaration_size_set self size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_size_set" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "varDeclaration_size_set" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->size,arg2,5*sizeof(char));
  else memset(arg1->size,0,5*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_size_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:varDeclaration_size_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_size_get" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  result = (char *)(char *) ((arg1)->size);
  {
    size_t size = 5;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_InitialValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:varDeclaration_InitialValue_set self InitialValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_InitialValue_set" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "varDeclaration_InitialValue_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->InitialValue) delete[] arg1->InitialValue;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->InitialValue = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->InitialValue = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_InitialValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:varDeclaration_InitialValue_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_InitialValue_get" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  result = (char *) ((arg1)->InitialValue);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_StructUniqueId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:varDeclaration_StructUniqueId_set self StructUniqueId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_StructUniqueId_set" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "varDeclaration_StructUniqueId_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->StructUniqueId) delete[] arg1->StructUniqueId;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->StructUniqueId = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->StructUniqueId = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_StructUniqueId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:varDeclaration_StructUniqueId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_StructUniqueId_get" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  result = (char *) ((arg1)->StructUniqueId);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_varDeclaration_Initialize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:varDeclaration_Initialize self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varDeclaration_Initialize" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  (arg1)->Initialize();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_varDeclaration(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_varDeclaration ") == TCL_ERROR) SWIG_fail;
  result = (varDeclaration *)new varDeclaration();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_varDeclaration,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_varDeclaration(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  varDeclaration *arg1 = (varDeclaration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_varDeclaration self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_varDeclaration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_varDeclaration" "', argument " "1"" of type '" "varDeclaration *""'"); 
  }
  arg1 = reinterpret_cast< varDeclaration * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_varDeclaration(void *obj) {
varDeclaration *arg1 = (varDeclaration *) obj;
delete arg1;
}
static swig_method swig_varDeclaration_methods[] = {
    {"Initialize", _wrap_varDeclaration_Initialize}, 
    {0,0}
};
static swig_attribute swig_varDeclaration_attributes[] = {
    { "-nam_id_dt_attr",_wrap_varDeclaration_nam_id_dt_attr_get, _wrap_varDeclaration_nam_id_dt_attr_set},
    { "-size",_wrap_varDeclaration_size_get, _wrap_varDeclaration_size_set},
    { "-InitialValue",_wrap_varDeclaration_InitialValue_get, _wrap_varDeclaration_InitialValue_set},
    { "-StructUniqueId",_wrap_varDeclaration_StructUniqueId_get, _wrap_varDeclaration_StructUniqueId_set},
    {0,0,0}
};
static swig_class *swig_varDeclaration_bases[] = {0};
static const char * swig_varDeclaration_base_names[] = {0};
static swig_class _wrap_class_varDeclaration = { "varDeclaration", &SWIGTYPE_p_varDeclaration,_wrap_new_varDeclaration, swig_delete_varDeclaration, swig_varDeclaration_methods, swig_varDeclaration_attributes, swig_varDeclaration_bases,swig_varDeclaration_base_names, &swig_module };
SWIGINTERN int
_wrap_Parameter_name_id_dt_attr_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  appProcessCommon *arg2 = (appProcessCommon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Parameter_name_id_dt_attr_set self name_id_dt_attr ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_name_id_dt_attr_set" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_appProcessCommon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Parameter_name_id_dt_attr_set" "', argument " "2"" of type '" "appProcessCommon *""'"); 
  }
  arg2 = reinterpret_cast< appProcessCommon * >(argp2);
  if (arg1) (arg1)->name_id_dt_attr = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_name_id_dt_attr_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  appProcessCommon *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Parameter_name_id_dt_attr_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_name_id_dt_attr_get" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  result = (appProcessCommon *)& ((arg1)->name_id_dt_attr);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_appProcessCommon,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_dataType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Parameter_dataType_set self dataType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_dataType_set" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Parameter_dataType_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->dataType) delete[] arg1->dataType;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->dataType = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->dataType = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_dataType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Parameter_dataType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_dataType_get" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  result = (char *) ((arg1)->dataType);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_StructIndex_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Parameter_StructIndex_set self StructIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_StructIndex_set" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Parameter_StructIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->StructIndex = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_StructIndex_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Parameter_StructIndex_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_StructIndex_get" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  result = (int) ((arg1)->StructIndex);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_access_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Parameter_access_set self access ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_access_set" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Parameter_access_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->access) delete[] arg1->access;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->access = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->access = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_access_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Parameter_access_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_access_get" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  result = (char *) ((arg1)->access);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_ParaIndex_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Parameter_ParaIndex_set self ParaIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_ParaIndex_set" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Parameter_ParaIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ParaIndex = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Parameter_ParaIndex_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Parameter_ParaIndex_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_ParaIndex_get" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  result = (int) ((arg1)->ParaIndex);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Parameter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Parameter ") == TCL_ERROR) SWIG_fail;
  result = (Parameter *)new Parameter();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Parameter,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Parameter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Parameter *arg1 = (Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Parameter self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Parameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Parameter" "', argument " "1"" of type '" "Parameter *""'"); 
  }
  arg1 = reinterpret_cast< Parameter * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Parameter(void *obj) {
Parameter *arg1 = (Parameter *) obj;
delete arg1;
}
static swig_method swig_Parameter_methods[] = {
    {0,0}
};
static swig_attribute swig_Parameter_attributes[] = {
    { "-name_id_dt_attr",_wrap_Parameter_name_id_dt_attr_get, _wrap_Parameter_name_id_dt_attr_set},
    { "-dataType",_wrap_Parameter_dataType_get, _wrap_Parameter_dataType_set},
    { "-StructIndex",_wrap_Parameter_StructIndex_get, _wrap_Parameter_StructIndex_set},
    { "-access",_wrap_Parameter_access_get, _wrap_Parameter_access_set},
    { "-ParaIndex",_wrap_Parameter_ParaIndex_get, _wrap_Parameter_ParaIndex_set},
    {0,0,0}
};
static swig_class *swig_Parameter_bases[] = {0};
static const char * swig_Parameter_base_names[] = {0};
static swig_class _wrap_class_Parameter = { "Parameter", &SWIGTYPE_p_Parameter,_wrap_new_Parameter, swig_delete_Parameter, swig_Parameter_methods, swig_Parameter_attributes, swig_Parameter_bases,swig_Parameter_base_names, &swig_module };
SWIGINTERN int
_wrap_MNPdoVariable_Index_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MNPdoVariable_Index_set self Index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_Index_set" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MNPdoVariable_Index_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->Index) delete[] arg1->Index;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->Index = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->Index = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_Index_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MNPdoVariable_Index_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_Index_get" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  result = (char *) ((arg1)->Index);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_SubIndex_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MNPdoVariable_SubIndex_set self SubIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_SubIndex_set" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MNPdoVariable_SubIndex_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->SubIndex) delete[] arg1->SubIndex;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->SubIndex = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->SubIndex = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_SubIndex_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MNPdoVariable_SubIndex_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_SubIndex_get" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  result = (char *) ((arg1)->SubIndex);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_Offset_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MNPdoVariable_Offset_set self Offset ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_Offset_set" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MNPdoVariable_Offset_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Offset = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_Offset_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MNPdoVariable_Offset_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_Offset_get" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  result = (int) ((arg1)->Offset);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_Value_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MNPdoVariable_Value_set self Value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_Value_set" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MNPdoVariable_Value_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->Value) delete[] arg1->Value;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->Value = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->Value = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_Value_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MNPdoVariable_Value_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_Value_get" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  result = (char *) ((arg1)->Value);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_DataSize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MNPdoVariable_DataSize_set self DataSize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_DataSize_set" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MNPdoVariable_DataSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->DataSize = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_DataSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MNPdoVariable_DataSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_DataSize_get" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  result = (int) ((arg1)->DataSize);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_pdoType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  EPDOType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MNPdoVariable_pdoType_set self pdoType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_pdoType_set" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MNPdoVariable_pdoType_set" "', argument " "2"" of type '" "EPDOType""'");
  } 
  arg2 = static_cast< EPDOType >(val2);
  if (arg1) (arg1)->pdoType = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MNPdoVariable_pdoType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EPDOType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MNPdoVariable_pdoType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MNPdoVariable_pdoType_get" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  result = (EPDOType) ((arg1)->pdoType);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_MNPdoVariable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_MNPdoVariable ") == TCL_ERROR) SWIG_fail;
  result = (MNPdoVariable *)new MNPdoVariable();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_MNPdoVariable,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_MNPdoVariable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MNPdoVariable *arg1 = (MNPdoVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_MNPdoVariable self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MNPdoVariable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MNPdoVariable" "', argument " "1"" of type '" "MNPdoVariable *""'"); 
  }
  arg1 = reinterpret_cast< MNPdoVariable * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_MNPdoVariable(void *obj) {
MNPdoVariable *arg1 = (MNPdoVariable *) obj;
delete arg1;
}
static swig_method swig_MNPdoVariable_methods[] = {
    {0,0}
};
static swig_attribute swig_MNPdoVariable_attributes[] = {
    { "-Index",_wrap_MNPdoVariable_Index_get, _wrap_MNPdoVariable_Index_set},
    { "-SubIndex",_wrap_MNPdoVariable_SubIndex_get, _wrap_MNPdoVariable_SubIndex_set},
    { "-Offset",_wrap_MNPdoVariable_Offset_get, _wrap_MNPdoVariable_Offset_set},
    { "-Value",_wrap_MNPdoVariable_Value_get, _wrap_MNPdoVariable_Value_set},
    { "-DataSize",_wrap_MNPdoVariable_DataSize_get, _wrap_MNPdoVariable_DataSize_set},
    { "-pdoType",_wrap_MNPdoVariable_pdoType_get, _wrap_MNPdoVariable_pdoType_set},
    {0,0,0}
};
static swig_class *swig_MNPdoVariable_bases[] = {0};
static const char * swig_MNPdoVariable_base_names[] = {0};
static swig_class _wrap_class_MNPdoVariable = { "MNPdoVariable", &SWIGTYPE_p_MNPdoVariable,_wrap_new_MNPdoVariable, swig_delete_MNPdoVariable, swig_MNPdoVariable_methods, swig_MNPdoVariable_attributes, swig_MNPdoVariable_bases,swig_MNPdoVariable_base_names, &swig_module };
SWIGINTERN int
_wrap_ImportXML(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ENodeType arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ImportXML fileName NodeID NodeType ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportXML" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportXML" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImportXML" "', argument " "3"" of type '" "ENodeType""'");
  } 
  arg3 = static_cast< ENodeType >(val3);
  result = ImportXML(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ReImportXML(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ENodeType arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ReImportXML fileName NodeID NodeType ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReImportXML" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReImportXML" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ReImportXML" "', argument " "3"" of type '" "ENodeType""'");
  } 
  arg3 = static_cast< ENodeType >(val3);
  result = ReImportXML(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GenerateXAP(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GenerateXAP fileName ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenerateXAP" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = GenerateXAP(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GenerateCDC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GenerateCDC CDCLocation ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenerateCDC" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = GenerateCDC(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CreateNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CreateNode NodeID NodeType NodeName ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateNode" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CreateNode" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = CreateNode(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_parseFile(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ENodeType arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:parseFile filename NodeID NodeType ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseFile" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "parseFile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "parseFile" "', argument " "3"" of type '" "ENodeType""'");
  } 
  arg3 = static_cast< ENodeType >(val3);
  result = parseFile(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DeleteNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DeleteNode NodeID NodeType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DeleteNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeleteNode" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  result = DeleteNode(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DeleteNodeObjDict(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DeleteNodeObjDict NodeID NodeType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DeleteNodeObjDict" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeleteNodeObjDict" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  result = DeleteNodeObjDict(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DeleteIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:DeleteIndex NodeID NodeType IndexID ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DeleteIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeleteIndex" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DeleteIndex" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = DeleteIndex(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DeleteSubIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:DeleteSubIndex NodeID NodeType IndexID SubIndexID ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DeleteSubIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeleteSubIndex" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DeleteSubIndex" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DeleteSubIndex" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = DeleteSubIndex(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AddIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:AddIndex NodeID NodeType IndexID ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AddIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AddIndex" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddIndex" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = AddIndex(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AddSubIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:AddSubIndex NodeID NodeType IndexID SubIndexID ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AddSubIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AddSubIndex" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddSubIndex" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddSubIndex" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = AddSubIndex(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetIndexAttributes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  EFlag arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:SetIndexAttributes NodeID NodeType IndexID IndexValue IndexName flagIfInCdc ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetIndexAttributes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetIndexAttributes" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SetIndexAttributes" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SetIndexAttributes" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SetIndexAttributes" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetIndexAttributes" "', argument " "6"" of type '" "EFlag""'");
  } 
  arg6 = static_cast< EFlag >(val6);
  result = SetIndexAttributes(arg1,arg2,arg3,arg4,arg5,arg6);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetSubIndexAttributes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:SetSubIndexAttributes NodeID NodeType IndexID SubIndexID IndexValue IndexName ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetSubIndexAttributes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetSubIndexAttributes" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SetSubIndexAttributes" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SetSubIndexAttributes" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SetSubIndexAttributes" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SetSubIndexAttributes" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = SetSubIndexAttributes(arg1,arg2,arg3,arg4,arg5,arg6);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DisplayNodeTree(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":DisplayNodeTree ") == TCL_ERROR) SWIG_fail;
  DisplayNodeTree();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IfNodeExists(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  int *arg3 = (int *) 0 ;
  bool *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:IfNodeExists NodeID NodeType NodePos ExistfFlag ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IfNodeExists" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IfNodeExists" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IfNodeExists" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IfNodeExists" "', argument " "4"" of type '" "bool &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IfNodeExists" "', argument " "4"" of type '" "bool &""'"); 
  }
  arg4 = reinterpret_cast< bool * >(argp4);
  result = IfNodeExists(arg1,arg2,arg3,*arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IfIndexExists(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:IfIndexExists NodeID NodeType IndexID IndexPos ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IfIndexExists" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IfIndexExists" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IfIndexExists" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IfIndexExists" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  result = IfIndexExists(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IfSubIndexExists(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:IfSubIndexExists NodeID NodeType IndexID SubIndexID SubIndexPos IndexPos ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IfSubIndexExists" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IfSubIndexExists" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IfSubIndexExists" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IfSubIndexExists" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IfSubIndexExists" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IfSubIndexExists" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  result = IfSubIndexExists(arg1,arg2,arg3,arg4,arg5,arg6);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIndexAttributes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  EAttributeType arg4 ;
  char *arg5 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  char temp5[512+1] ;
  ocfmRetCode result;
  
  arg5 = (char *) temp5;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetIndexAttributes NodeID NodeType IndexID AttributeType ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetIndexAttributes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetIndexAttributes" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetIndexAttributes" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetIndexAttributes" "', argument " "4"" of type '" "EAttributeType""'");
  } 
  arg4 = static_cast< EAttributeType >(val4);
  result = GetIndexAttributes(arg1,arg2,arg3,arg4,arg5);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg5[512] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg5));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSubIndexAttributes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  EAttributeType arg5 ;
  char *arg6 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  char temp6[512+1] ;
  ocfmRetCode result;
  
  arg6 = (char *) temp6;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:GetSubIndexAttributes NodeID NodeType IndexID SubIndexID AttributeType ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSubIndexAttributes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetSubIndexAttributes" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetSubIndexAttributes" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetSubIndexAttributes" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GetSubIndexAttributes" "', argument " "5"" of type '" "EAttributeType""'");
  } 
  arg5 = static_cast< EAttributeType >(val5);
  result = GetSubIndexAttributes(arg1,arg2,arg3,arg4,arg5,arg6);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg6[512] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg6));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNodeCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetNodeCount MNID Out_NodeCount ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetNodeCount" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetNodeCount" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  result = GetNodeCount(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIndexCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetIndexCount NodeID NodeType Out_IndexCount ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetIndexCount" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetIndexCount" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetIndexCount" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  result = GetIndexCount(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSubIndexCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetSubIndexCount NodeID NodeType IndexID Out_SubIndexCount ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSubIndexCount" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetSubIndexCount" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetSubIndexCount" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetSubIndexCount" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  result = GetSubIndexCount(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNodeAttributesbyNodePos(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char temp3[100+1] ;
  ocfmRetCode result;
  
  arg3 = (char *) temp3;
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetNodeAttributesbyNodePos NodePos Out_NodeID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetNodeAttributesbyNodePos" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetNodeAttributesbyNodePos" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  result = GetNodeAttributesbyNodePos(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg3[100] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg3));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIndexIDbyIndexPos(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char temp4[100+1] ;
  ocfmRetCode result;
  
  arg4 = (char *) temp4;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetIndexIDbyIndexPos NodeID NodeType IndexPos ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetIndexIDbyIndexPos" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetIndexIDbyIndexPos" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetIndexIDbyIndexPos" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = GetIndexIDbyIndexPos(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg4[100] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg4));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSubIndexIDbySubIndexPos(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  char temp5[100+1] ;
  ocfmRetCode result;
  
  arg5 = (char *) temp5;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetSubIndexIDbySubIndexPos NodeID NodeType IndexID SubIndexPos ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSubIndexIDbySubIndexPos" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetSubIndexIDbySubIndexPos" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetSubIndexIDbySubIndexPos" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetSubIndexIDbySubIndexPos" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = GetSubIndexIDbySubIndexPos(arg1,arg2,arg3,arg4,arg5);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg5[100] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg5));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIndexIDbyPositions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char temp3[100+1] ;
  ocfmRetCode result;
  
  arg3 = (char *) temp3;
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetIndexIDbyPositions NodePos IndexPos ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetIndexIDbyPositions" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetIndexIDbyPositions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = GetIndexIDbyPositions(arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg3[100] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg3));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSubIndexIDbyPositions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char temp4[100+1] ;
  ocfmRetCode result;
  
  arg4 = (char *) temp4;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetSubIndexIDbyPositions NodePos IndexPos SubIndexPos ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSubIndexIDbyPositions" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetSubIndexIDbyPositions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetSubIndexIDbyPositions" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = GetSubIndexIDbyPositions(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg4[100] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg4));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIndexAttributesbyPositions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  EAttributeType arg3 ;
  char *arg4 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char temp4[512+1] ;
  ocfmRetCode result;
  
  arg4 = (char *) temp4;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetIndexAttributesbyPositions NodePos IndexPos AttributeType ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetIndexAttributesbyPositions" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetIndexAttributesbyPositions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetIndexAttributesbyPositions" "', argument " "3"" of type '" "EAttributeType""'");
  } 
  arg3 = static_cast< EAttributeType >(val3);
  result = GetIndexAttributesbyPositions(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg4[512] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg4));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSubIndexAttributesbyPositions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  EAttributeType arg4 ;
  char *arg5 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  char temp5[512+1] ;
  ocfmRetCode result;
  
  arg5 = (char *) temp5;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetSubIndexAttributesbyPositions NodePos IndexPos SubIndexPos AttributeType ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSubIndexAttributesbyPositions" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetSubIndexAttributesbyPositions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetSubIndexAttributesbyPositions" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetSubIndexAttributesbyPositions" "', argument " "4"" of type '" "EAttributeType""'");
  } 
  arg4 = static_cast< EAttributeType >(val4);
  result = GetSubIndexAttributesbyPositions(arg1,arg2,arg3,arg4,arg5);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  arg5[512] = 0;  
  Tcl_ListObjAppendElement(interp,Tcl_GetObjResult(interp),SWIG_FromCharPtr(arg5));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LoadObjectDictionary(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:LoadObjectDictionary fileName ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadObjectDictionary" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  LoadObjectDictionary(arg1);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ENodeType arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SaveNode fileName NodeID NodeType ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveNode" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveNode" "', argument " "3"" of type '" "ENodeType""'");
  } 
  arg3 = static_cast< ENodeType >(val3);
  result = SaveNode((char const *)arg1,arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveProject(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SaveProject ProjectPath ProjectName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveProject" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveProject" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = SaveProject(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OpenProject(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:OpenProject PjtPath projectXmlFileName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenProject" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenProject" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = OpenProject(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetProjectSettings(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoGenerate *arg1 = (EAutoGenerate *) 0 ;
  EAutoSave *arg2 = (EAutoSave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetProjectSettings autoGen autoSave ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_EAutoGenerate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetProjectSettings" "', argument " "1"" of type '" "EAutoGenerate *""'"); 
  }
  arg1 = reinterpret_cast< EAutoGenerate * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_EAutoSave, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetProjectSettings" "', argument " "2"" of type '" "EAutoSave *""'"); 
  }
  arg2 = reinterpret_cast< EAutoSave * >(argp2);
  result = GetProjectSettings(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetProjectSettings(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  EAutoGenerate arg1 ;
  EAutoSave arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetProjectSettings autoGen autoSave ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetProjectSettings" "', argument " "1"" of type '" "EAutoGenerate""'");
  } 
  arg1 = static_cast< EAutoGenerate >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetProjectSettings" "', argument " "2"" of type '" "EAutoSave""'");
  } 
  arg2 = static_cast< EAutoSave >(val2);
  result = SetProjectSettings(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GenerateMNOBD(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,":GenerateMNOBD ") == TCL_ERROR) SWIG_fail;
  result = GenerateMNOBD();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetALLIndexAttributes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  EFlag arg13 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  int res11 ;
  char *buf11 = 0 ;
  int alloc11 = 0 ;
  int res12 ;
  char *buf12 = 0 ;
  int alloc12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooooooo:SetALLIndexAttributes NodeID NodeType IndexID ActualValue IndexName Access dataTypeValue pdoMappingVal defaultValue highLimit lowLimit objType flagIfIncludedInCdc ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetALLIndexAttributes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetALLIndexAttributes" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SetALLIndexAttributes" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SetALLIndexAttributes" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SetALLIndexAttributes" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SetALLIndexAttributes" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SetALLIndexAttributes" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(objv[8], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "SetALLIndexAttributes" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(objv[9], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "SetALLIndexAttributes" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  res10 = SWIG_AsCharPtrAndSize(objv[10], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "SetALLIndexAttributes" "', argument " "10"" of type '" "char *""'");
  }
  arg10 = reinterpret_cast< char * >(buf10);
  res11 = SWIG_AsCharPtrAndSize(objv[11], &buf11, NULL, &alloc11);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "SetALLIndexAttributes" "', argument " "11"" of type '" "char *""'");
  }
  arg11 = reinterpret_cast< char * >(buf11);
  res12 = SWIG_AsCharPtrAndSize(objv[12], &buf12, NULL, &alloc12);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "SetALLIndexAttributes" "', argument " "12"" of type '" "char *""'");
  }
  arg12 = reinterpret_cast< char * >(buf12);
  ecode13 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[13], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SetALLIndexAttributes" "', argument " "13"" of type '" "EFlag""'");
  } 
  arg13 = static_cast< EFlag >(val13);
  result = SetALLIndexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetALLSubIndexAttributes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  ENodeType arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  EFlag arg14 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  int res11 ;
  char *buf11 = 0 ;
  int alloc11 = 0 ;
  int res12 ;
  char *buf12 = 0 ;
  int alloc12 = 0 ;
  int res13 ;
  char *buf13 = 0 ;
  int alloc13 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  ocfmRetCode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooooooooo:SetALLSubIndexAttributes NodeID NodeType IndexID SubIndexID ActualValue IndexName Access dataTypeValue pdoMappingVal defaultValue highLimit lowLimit objType flagIfIncludedInCdc ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetALLSubIndexAttributes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetALLSubIndexAttributes" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SetALLSubIndexAttributes" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SetALLSubIndexAttributes" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SetALLSubIndexAttributes" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SetALLSubIndexAttributes" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SetALLSubIndexAttributes" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(objv[8], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "SetALLSubIndexAttributes" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(objv[9], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "SetALLSubIndexAttributes" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  res10 = SWIG_AsCharPtrAndSize(objv[10], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "SetALLSubIndexAttributes" "', argument " "10"" of type '" "char *""'");
  }
  arg10 = reinterpret_cast< char * >(buf10);
  res11 = SWIG_AsCharPtrAndSize(objv[11], &buf11, NULL, &alloc11);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "SetALLSubIndexAttributes" "', argument " "11"" of type '" "char *""'");
  }
  arg11 = reinterpret_cast< char * >(buf11);
  res12 = SWIG_AsCharPtrAndSize(objv[12], &buf12, NULL, &alloc12);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "SetALLSubIndexAttributes" "', argument " "12"" of type '" "char *""'");
  }
  arg12 = reinterpret_cast< char * >(buf12);
  res13 = SWIG_AsCharPtrAndSize(objv[13], &buf13, NULL, &alloc13);
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "SetALLSubIndexAttributes" "', argument " "13"" of type '" "char *""'");
  }
  arg13 = reinterpret_cast< char * >(buf13);
  ecode14 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[14], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SetALLSubIndexAttributes" "', argument " "14"" of type '" "EFlag""'");
  } 
  arg14 = static_cast< EFlag >(val14);
  result = SetALLSubIndexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new ocfmRetCode(static_cast< const ocfmRetCode& >(result))), SWIGTYPE_p_ocfmRetCode, SWIG_POINTER_OWN | 0 ));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  if (alloc13 == SWIG_NEWOBJ) delete[] buf13;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  if (alloc13 == SWIG_NEWOBJ) delete[] buf13;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CIndexCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CIndexCollection ") == TCL_ERROR) SWIG_fail;
  result = (CIndexCollection *)new CIndexCollection();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndexCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CIndexCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *arg1 = (CIndexCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CIndexCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndexCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CIndexCollection" "', argument " "1"" of type '" "CIndexCollection *""'"); 
  }
  arg1 = reinterpret_cast< CIndexCollection * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndexCollection_addIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *arg1 = (CIndexCollection *) 0 ;
  CIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndexCollection_addIndex self objIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndexCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndexCollection_addIndex" "', argument " "1"" of type '" "CIndexCollection *""'"); 
  }
  arg1 = reinterpret_cast< CIndexCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CIndex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CIndexCollection_addIndex" "', argument " "2"" of type '" "CIndex""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CIndexCollection_addIndex" "', argument " "2"" of type '" "CIndex""'");
    } else {
      arg2 = *(reinterpret_cast< CIndex * >(argp2));
    }
  }
  (arg1)->addIndex(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndexCollection_deleteIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *arg1 = (CIndexCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndexCollection_deleteIndex self IndexID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndexCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndexCollection_deleteIndex" "', argument " "1"" of type '" "CIndexCollection *""'"); 
  }
  arg1 = reinterpret_cast< CIndexCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CIndexCollection_deleteIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->deleteIndex(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndexCollection_DeleteIndexCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *arg1 = (CIndexCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CIndexCollection_DeleteIndexCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndexCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndexCollection_DeleteIndexCollection" "', argument " "1"" of type '" "CIndexCollection *""'"); 
  }
  arg1 = reinterpret_cast< CIndexCollection * >(argp1);
  (arg1)->DeleteIndexCollection();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndexCollection_getNumberofIndexes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *arg1 = (CIndexCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CIndexCollection_getNumberofIndexes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndexCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndexCollection_getNumberofIndexes" "', argument " "1"" of type '" "CIndexCollection *""'"); 
  }
  arg1 = reinterpret_cast< CIndexCollection * >(argp1);
  result = (int)(arg1)->getNumberofIndexes();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndexCollection_getIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *arg1 = (CIndexCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CIndex *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndexCollection_getIndex self Count ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndexCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndexCollection_getIndex" "', argument " "1"" of type '" "CIndexCollection *""'"); 
  }
  arg1 = reinterpret_cast< CIndexCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CIndexCollection_getIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (CIndex *)(arg1)->getIndex(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndex,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndexCollection_getIndexbyIndexValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndexCollection *arg1 = (CIndexCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  CIndex *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndexCollection_getIndexbyIndexValue self Index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndexCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndexCollection_getIndexbyIndexValue" "', argument " "1"" of type '" "CIndexCollection *""'"); 
  }
  arg1 = reinterpret_cast< CIndexCollection * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CIndexCollection_getIndexbyIndexValue" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (CIndex *)(arg1)->getIndexbyIndexValue(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndex,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CIndexCollection(void *obj) {
CIndexCollection *arg1 = (CIndexCollection *) obj;
delete arg1;
}
static swig_method swig_CIndexCollection_methods[] = {
    {"addIndex", _wrap_CIndexCollection_addIndex}, 
    {"deleteIndex", _wrap_CIndexCollection_deleteIndex}, 
    {"DeleteIndexCollection", _wrap_CIndexCollection_DeleteIndexCollection}, 
    {"getNumberofIndexes", _wrap_CIndexCollection_getNumberofIndexes}, 
    {"getIndex", _wrap_CIndexCollection_getIndex}, 
    {"getIndexbyIndexValue", _wrap_CIndexCollection_getIndexbyIndexValue}, 
    {0,0}
};
static swig_attribute swig_CIndexCollection_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CIndexCollection_bases[] = {0};
static const char * swig_CIndexCollection_base_names[] = {0};
static swig_class _wrap_class_CIndexCollection = { "CIndexCollection", &SWIGTYPE_p_CIndexCollection,_wrap_new_CIndexCollection, swig_delete_CIndexCollection, swig_CIndexCollection_methods, swig_CIndexCollection_attributes, swig_CIndexCollection_bases,swig_CIndexCollection_base_names, &swig_module };
SWIGINTERN int
_wrap_new_CIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CIndex ") == TCL_ERROR) SWIG_fail;
  result = (CIndex *)new CIndex();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndex,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CIndex self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CIndex" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndex_addSubIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  CSubIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndex_addSubIndex self objSubIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndex_addSubIndex" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CSubIndex,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CIndex_addSubIndex" "', argument " "2"" of type '" "CSubIndex""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CIndex_addSubIndex" "', argument " "2"" of type '" "CSubIndex""'");
    } else {
      arg2 = *(reinterpret_cast< CSubIndex * >(argp2));
    }
  }
  (arg1)->addSubIndex(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndex_deleteSubIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndex_deleteSubIndex self SubIndexID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndex_deleteSubIndex" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CIndex_deleteSubIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->deleteSubIndex(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndex_getNumberofSubIndexes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CIndex_getNumberofSubIndexes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndex_getNumberofSubIndexes" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  result = (int)(arg1)->getNumberofSubIndexes();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndex_getSubIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CSubIndex *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndex_getSubIndex self SubIndexId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndex_getSubIndex" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CIndex_getSubIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (CSubIndex *)(arg1)->getSubIndex(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CSubIndex,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndex_getPDOType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EPDOType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CIndex_getPDOType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndex_getPDOType" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  result = (EPDOType)(arg1)->getPDOType();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndex_setPDOType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  EPDOType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndex_setPDOType self PDOType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndex_setPDOType" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CIndex_setPDOType" "', argument " "2"" of type '" "EPDOType""'");
  } 
  arg2 = static_cast< EPDOType >(val2);
  (arg1)->setPDOType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CIndex_getSubIndexbyIndexValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CIndex *arg1 = (CIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  CSubIndex *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CIndex_getSubIndexbyIndexValue self Index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CIndex_getSubIndexbyIndexValue" "', argument " "1"" of type '" "CIndex *""'"); 
  }
  arg1 = reinterpret_cast< CIndex * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CIndex_getSubIndexbyIndexValue" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (CSubIndex *)(arg1)->getSubIndexbyIndexValue(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CSubIndex,0));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CIndex(void *obj) {
CIndex *arg1 = (CIndex *) obj;
delete arg1;
}
static swig_method swig_CIndex_methods[] = {
    {"addSubIndex", _wrap_CIndex_addSubIndex}, 
    {"deleteSubIndex", _wrap_CIndex_deleteSubIndex}, 
    {"getNumberofSubIndexes", _wrap_CIndex_getNumberofSubIndexes}, 
    {"getSubIndex", _wrap_CIndex_getSubIndex}, 
    {"getPDOType", _wrap_CIndex_getPDOType}, 
    {"setPDOType", _wrap_CIndex_setPDOType}, 
    {"getSubIndexbyIndexValue", _wrap_CIndex_getSubIndexbyIndexValue}, 
    {0,0}
};
static swig_attribute swig_CIndex_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CIndex_bases[] = {0,0};
static const char * swig_CIndex_base_names[] = {"CBaseIndex *",0};
static swig_class _wrap_class_CIndex = { "CIndex", &SWIGTYPE_p_CIndex,_wrap_new_CIndex, swig_delete_CIndex, swig_CIndex_methods, swig_CIndex_attributes, swig_CIndex_bases,swig_CIndex_base_names, &swig_module };
SWIGINTERN int
_wrap_new_CNodeCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CNodeCollection ") == TCL_ERROR) SWIG_fail;
  result = (CNodeCollection *)new CNodeCollection();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CNodeCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CNodeCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CNodeCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CNodeCollection" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNumberOfNodes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNodeCollection_getNumberOfNodes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getNumberOfNodes" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  result = (int)(arg1)->getNumberOfNodes();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_addNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  CNode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNodeCollection_addNode self objNode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_addNode" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CNode,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNodeCollection_addNode" "', argument " "2"" of type '" "CNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNodeCollection_addNode" "', argument " "2"" of type '" "CNode""'");
    } else {
      arg2 = *(reinterpret_cast< CNode * >(argp2));
    }
  }
  (arg1)->addNode(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_deleteNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNodeCollection_deleteNode self NodeID ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_deleteNode" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNodeCollection_deleteNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->deleteNode(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNodeColObjectPointer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":CNodeCollection_getNodeColObjectPointer ") == TCL_ERROR) SWIG_fail;
  result = (CNodeCollection *)CNodeCollection::getNodeColObjectPointer();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CNodeCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNode__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  ENodeType arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  CNode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CNodeCollection_getNode self nodeType NodeId ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getNode" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNodeCollection_getNode" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CNodeCollection_getNode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->getNode(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CNode(static_cast< const CNode& >(result))), SWIGTYPE_p_CNode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNode__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CNode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNodeCollection_getNode self NodeId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getNode" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNodeCollection_getNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getNode(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CNode(static_cast< const CNode& >(result))), SWIGTYPE_p_CNode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CNodeCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CNodeCollection_getNode__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CNodeCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CNodeCollection_getNode__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'CNodeCollection_getNode'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNodebyCollectionIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CNode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNodeCollection_getNodebyCollectionIndex self ColIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getNodebyCollectionIndex" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNodeCollection_getNodebyCollectionIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getNodebyCollectionIndex(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CNode(static_cast< const CNode& >(result))), SWIGTYPE_p_CNode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getMNNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CNode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNodeCollection_getMNNode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getMNNode" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  result = (arg1)->getMNNode();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CNode(static_cast< const CNode& >(result))), SWIGTYPE_p_CNode, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNodePtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  ENodeType arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  CNode *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CNodeCollection_getNodePtr self nodeType NodeId ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getNodePtr" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNodeCollection_getNodePtr" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CNodeCollection_getNodePtr" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (CNode *)(arg1)->getNodePtr(arg2,arg3);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CNode,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNodebyColIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CNode *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNodeCollection_getNodebyColIndex self ColIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getNodebyColIndex" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNodeCollection_getNodebyColIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (CNode *)(arg1)->getNodebyColIndex(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CNode,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getCNNodesCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection *arg1 = (CNodeCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNodeCollection_getCNNodesCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNodeCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNodeCollection_getCNNodesCount" "', argument " "1"" of type '" "CNodeCollection *""'"); 
  }
  arg1 = reinterpret_cast< CNodeCollection * >(argp1);
  result = (int)(arg1)->getCNNodesCount();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNodeCollection_getNodeColObject(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNodeCollection result;
  
  if (SWIG_GetArgs(interp, objc, objv,":CNodeCollection_getNodeColObject ") == TCL_ERROR) SWIG_fail;
  result = CNodeCollection::getNodeColObject();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CNodeCollection(static_cast< const CNodeCollection& >(result))), SWIGTYPE_p_CNodeCollection, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CNodeCollection(void *obj) {
CNodeCollection *arg1 = (CNodeCollection *) obj;
delete arg1;
}
static swig_method swig_CNodeCollection_methods[] = {
    {"getNumberOfNodes", _wrap_CNodeCollection_getNumberOfNodes}, 
    {"addNode", _wrap_CNodeCollection_addNode}, 
    {"deleteNode", _wrap_CNodeCollection_deleteNode}, 
    {"getNode", _wrap_CNodeCollection_getNode}, 
    {"getNodebyCollectionIndex", _wrap_CNodeCollection_getNodebyCollectionIndex}, 
    {"getMNNode", _wrap_CNodeCollection_getMNNode}, 
    {"getNodePtr", _wrap_CNodeCollection_getNodePtr}, 
    {"getNodebyColIndex", _wrap_CNodeCollection_getNodebyColIndex}, 
    {"getCNNodesCount", _wrap_CNodeCollection_getCNNodesCount}, 
    {0,0}
};
static swig_attribute swig_CNodeCollection_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CNodeCollection_bases[] = {0};
static const char * swig_CNodeCollection_base_names[] = {0};
static swig_class _wrap_class_CNodeCollection = { "CNodeCollection", &SWIGTYPE_p_CNodeCollection,_wrap_new_CNodeCollection, swig_delete_CNodeCollection, swig_CNodeCollection_methods, swig_CNodeCollection_attributes, swig_CNodeCollection_bases,swig_CNodeCollection_base_names, &swig_module };
SWIGINTERN int
_wrap_new_CNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CNode ") == TCL_ERROR) SWIG_fail;
  result = (CNode *)new CNode();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CNode,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CNode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CNode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CNode" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_ProcessImageCollection_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  TCollection< ProcessImage > *arg2 = (TCollection< ProcessImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_ProcessImageCollection_set self ProcessImageCollection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_ProcessImageCollection_set" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_TCollectionT_ProcessImage_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNode_ProcessImageCollection_set" "', argument " "2"" of type '" "TCollection< ProcessImage > *""'"); 
  }
  arg2 = reinterpret_cast< TCollection< ProcessImage > * >(argp2);
  if (arg1) (arg1)->ProcessImageCollection = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_ProcessImageCollection_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TCollection< ProcessImage > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_ProcessImageCollection_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_ProcessImageCollection_get" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (TCollection< ProcessImage > *)& ((arg1)->ProcessImageCollection);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TCollectionT_ProcessImage_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_MNPDOINVarCollection_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  TCollection< MNPdoVariable > *arg2 = (TCollection< MNPdoVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_MNPDOINVarCollection_set self MNPDOINVarCollection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_MNPDOINVarCollection_set" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_TCollectionT_MNPdoVariable_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNode_MNPDOINVarCollection_set" "', argument " "2"" of type '" "TCollection< MNPdoVariable > *""'"); 
  }
  arg2 = reinterpret_cast< TCollection< MNPdoVariable > * >(argp2);
  if (arg1) (arg1)->MNPDOINVarCollection = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_MNPDOINVarCollection_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TCollection< MNPdoVariable > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_MNPDOINVarCollection_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_MNPDOINVarCollection_get" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (TCollection< MNPdoVariable > *)& ((arg1)->MNPDOINVarCollection);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TCollectionT_MNPdoVariable_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_MNPDOOUTVarCollection_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  TCollection< MNPdoVariable > *arg2 = (TCollection< MNPdoVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_MNPDOOUTVarCollection_set self MNPDOOUTVarCollection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_MNPDOOUTVarCollection_set" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_TCollectionT_MNPdoVariable_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNode_MNPDOOUTVarCollection_set" "', argument " "2"" of type '" "TCollection< MNPdoVariable > *""'"); 
  }
  arg2 = reinterpret_cast< TCollection< MNPdoVariable > * >(argp2);
  if (arg1) (arg1)->MNPDOOUTVarCollection = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_MNPDOOUTVarCollection_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TCollection< MNPdoVariable > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_MNPDOOUTVarCollection_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_MNPDOOUTVarCollection_get" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (TCollection< MNPdoVariable > *)& ((arg1)->MNPDOOUTVarCollection);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TCollectionT_MNPdoVariable_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getDataTypeCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CDataTypeCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getDataTypeCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getDataTypeCollection" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (CDataTypeCollection *)(arg1)->getDataTypeCollection();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CDataTypeCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getIndexCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CIndexCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getIndexCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getIndexCollection" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (CIndexCollection *)(arg1)->getIndexCollection();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndexCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getApplicationProcess(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CApplicationProcess *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getApplicationProcess self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getApplicationProcess" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (CApplicationProcess *)(arg1)->getApplicationProcess();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CApplicationProcess,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getNodeId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getNodeId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getNodeId" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (int)(arg1)->getNodeId();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_setNodeId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_setNodeId self NodeId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_setNodeId" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNode_setNodeId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setNodeId(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getNodeIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getNodeIndex self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getNodeIndex" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (int)(arg1)->getNodeIndex();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_setNodeIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_setNodeIndex self NodeIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_setNodeIndex" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNode_setNodeIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setNodeIndex(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getNodeName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getNodeName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getNodeName" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (char *)(arg1)->getNodeName();
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_setNodeName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_setNodeName self NodeName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_setNodeName" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNode_setNodeName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->setNodeName(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getNodeType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ENodeType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getNodeType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getNodeType" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (ENodeType)(arg1)->getNodeType();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_setNodeType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  ENodeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_setNodeType self NodeType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_setNodeType" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNode_setNodeType" "', argument " "2"" of type '" "ENodeType""'");
  } 
  arg2 = static_cast< ENodeType >(val2);
  (arg1)->setNodeType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_HasPdoObjects(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_HasPdoObjects self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_HasPdoObjects" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (bool)(arg1)->HasPdoObjects();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_setFlagForPdoObjects(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_setFlagForPdoObjects self flag ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_setFlagForPdoObjects" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNode_setFlagForPdoObjects" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setFlagForPdoObjects(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_CreateIndexCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_CreateIndexCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_CreateIndexCollection" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  (arg1)->CreateIndexCollection();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_CreateDataTypeCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_CreateDataTypeCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_CreateDataTypeCollection" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  (arg1)->CreateDataTypeCollection();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_CreateApplicationProcess(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_CreateApplicationProcess self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_CreateApplicationProcess" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  (arg1)->CreateApplicationProcess();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_addProcessImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  ProcessImage arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_addProcessImage self processImage ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_addProcessImage" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_ProcessImage,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNode_addProcessImage" "', argument " "2"" of type '" "ProcessImage""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNode_addProcessImage" "', argument " "2"" of type '" "ProcessImage""'");
    } else {
      arg2 = *(reinterpret_cast< ProcessImage * >(argp2));
    }
  }
  (arg1)->addProcessImage(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_addMNPDOvar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  MNPdoVariable arg2 ;
  EPDOType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CNode_addMNPDOvar self variable pdoType ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_addMNPDOvar" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_MNPdoVariable,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNode_addMNPDOvar" "', argument " "2"" of type '" "MNPdoVariable""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNode_addMNPDOvar" "', argument " "2"" of type '" "MNPdoVariable""'");
    } else {
      arg2 = *(reinterpret_cast< MNPdoVariable * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CNode_addMNPDOvar" "', argument " "3"" of type '" "EPDOType""'");
  } 
  arg3 = static_cast< EPDOType >(val3);
  (arg1)->addMNPDOvar(arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getPDOIndexCollection__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  EPDOType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CIndexCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_getPDOIndexCollection self PDOType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getPDOIndexCollection" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNode_getPDOIndexCollection" "', argument " "2"" of type '" "EPDOType""'");
  } 
  arg2 = static_cast< EPDOType >(val2);
  result = (CIndexCollection *)(arg1)->getPDOIndexCollection(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndexCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getIndexCollectionWithoutPDO(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CIndexCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getIndexCollectionWithoutPDO self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getIndexCollectionWithoutPDO" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (CIndexCollection *)(arg1)->getIndexCollectionWithoutPDO();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndexCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getPDOIndexCollection__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CIndexCollection *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_getPDOIndexCollection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getPDOIndexCollection" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (CIndexCollection *)(arg1)->getPDOIndexCollection();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CIndexCollection,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getPDOIndexCollection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CNode_getPDOIndexCollection__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CNode_getPDOIndexCollection__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'CNode_getPDOIndexCollection'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_getPIbyParaIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ProcessImage *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CNode_getPIbyParaIndex self paraIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_getPIbyParaIndex" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNode_getPIbyParaIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (ProcessImage *)(arg1)->getPIbyParaIndex(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ProcessImage,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_DeleteCollectionsForPI(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_DeleteCollectionsForPI self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_DeleteCollectionsForPI" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  (arg1)->DeleteCollectionsForPI();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CNode_isNull(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CNode *arg1 = (CNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CNode_isNull self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNode_isNull" "', argument " "1"" of type '" "CNode *""'"); 
  }
  arg1 = reinterpret_cast< CNode * >(argp1);
  result = (bool)(arg1)->isNull();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CNode(void *obj) {
CNode *arg1 = (CNode *) obj;
delete arg1;
}
static swig_method swig_CNode_methods[] = {
    {"getDataTypeCollection", _wrap_CNode_getDataTypeCollection}, 
    {"getIndexCollection", _wrap_CNode_getIndexCollection}, 
    {"getApplicationProcess", _wrap_CNode_getApplicationProcess}, 
    {"getNodeId", _wrap_CNode_getNodeId}, 
    {"setNodeId", _wrap_CNode_setNodeId}, 
    {"getNodeIndex", _wrap_CNode_getNodeIndex}, 
    {"setNodeIndex", _wrap_CNode_setNodeIndex}, 
    {"getNodeName", _wrap_CNode_getNodeName}, 
    {"setNodeName", _wrap_CNode_setNodeName}, 
    {"getNodeType", _wrap_CNode_getNodeType}, 
    {"setNodeType", _wrap_CNode_setNodeType}, 
    {"HasPdoObjects", _wrap_CNode_HasPdoObjects}, 
    {"setFlagForPdoObjects", _wrap_CNode_setFlagForPdoObjects}, 
    {"CreateIndexCollection", _wrap_CNode_CreateIndexCollection}, 
    {"CreateDataTypeCollection", _wrap_CNode_CreateDataTypeCollection}, 
    {"CreateApplicationProcess", _wrap_CNode_CreateApplicationProcess}, 
    {"addProcessImage", _wrap_CNode_addProcessImage}, 
    {"addMNPDOvar", _wrap_CNode_addMNPDOvar}, 
    {"getIndexCollectionWithoutPDO", _wrap_CNode_getIndexCollectionWithoutPDO}, 
    {"getPDOIndexCollection", _wrap_CNode_getPDOIndexCollection}, 
    {"getPIbyParaIndex", _wrap_CNode_getPIbyParaIndex}, 
    {"DeleteCollectionsForPI", _wrap_CNode_DeleteCollectionsForPI}, 
    {"isNull", _wrap_CNode_isNull}, 
    {0,0}
};
static swig_attribute swig_CNode_attributes[] = {
    { "-ProcessImageCollection",_wrap_CNode_ProcessImageCollection_get, _wrap_CNode_ProcessImageCollection_set},
    { "-MNPDOINVarCollection",_wrap_CNode_MNPDOINVarCollection_get, _wrap_CNode_MNPDOINVarCollection_set},
    { "-MNPDOOUTVarCollection",_wrap_CNode_MNPDOOUTVarCollection_get, _wrap_CNode_MNPDOOUTVarCollection_set},
    {0,0,0}
};
static swig_class *swig_CNode_bases[] = {0};
static const char * swig_CNode_base_names[] = {0};
static swig_class _wrap_class_CNode = { "CNode", &SWIGTYPE_p_CNode,_wrap_new_CNode, swig_delete_CNode, swig_CNode_methods, swig_CNode_attributes, swig_CNode_bases,swig_CNode_base_names, &swig_module };
SWIGINTERN int
_wrap_new_CSubIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CSubIndex *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CSubIndex ") == TCL_ERROR) SWIG_fail;
  result = (CSubIndex *)new CSubIndex();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CSubIndex,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CSubIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CSubIndex *arg1 = (CSubIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CSubIndex self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CSubIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CSubIndex" "', argument " "1"" of type '" "CSubIndex *""'"); 
  }
  arg1 = reinterpret_cast< CSubIndex * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CSubIndex(void *obj) {
CSubIndex *arg1 = (CSubIndex *) obj;
delete arg1;
}
static swig_method swig_CSubIndex_methods[] = {
    {0,0}
};
static swig_attribute swig_CSubIndex_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CSubIndex_bases[] = {0,0};
static const char * swig_CSubIndex_base_names[] = {"CBaseIndex *",0};
static swig_class _wrap_class_CSubIndex = { "CSubIndex", &SWIGTYPE_p_CSubIndex,_wrap_new_CSubIndex, swig_delete_CSubIndex, swig_CSubIndex_methods, swig_CSubIndex_attributes, swig_CSubIndex_bases,swig_CSubIndex_base_names, &swig_module };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_charp", (swig_wrapper_func) _wrap_new_charp, NULL},
    { SWIG_prefix "copy_charp", (swig_wrapper_func) _wrap_copy_charp, NULL},
    { SWIG_prefix "delete_charp", (swig_wrapper_func) _wrap_delete_charp, NULL},
    { SWIG_prefix "charp_assign", (swig_wrapper_func) _wrap_charp_assign, NULL},
    { SWIG_prefix "charp_value", (swig_wrapper_func) _wrap_charp_value, NULL},
    { SWIG_prefix "new_longp", (swig_wrapper_func) _wrap_new_longp, NULL},
    { SWIG_prefix "copy_longp", (swig_wrapper_func) _wrap_copy_longp, NULL},
    { SWIG_prefix "delete_longp", (swig_wrapper_func) _wrap_delete_longp, NULL},
    { SWIG_prefix "longp_assign", (swig_wrapper_func) _wrap_longp_assign, NULL},
    { SWIG_prefix "longp_value", (swig_wrapper_func) _wrap_longp_value, NULL},
    { SWIG_prefix "new_intp", (swig_wrapper_func) _wrap_new_intp, NULL},
    { SWIG_prefix "copy_intp", (swig_wrapper_func) _wrap_copy_intp, NULL},
    { SWIG_prefix "delete_intp", (swig_wrapper_func) _wrap_delete_intp, NULL},
    { SWIG_prefix "intp_assign", (swig_wrapper_func) _wrap_intp_assign, NULL},
    { SWIG_prefix "intp_value", (swig_wrapper_func) _wrap_intp_value, NULL},
    { SWIG_prefix "new_boolp", (swig_wrapper_func) _wrap_new_boolp, NULL},
    { SWIG_prefix "copy_boolp", (swig_wrapper_func) _wrap_copy_boolp, NULL},
    { SWIG_prefix "delete_boolp", (swig_wrapper_func) _wrap_delete_boolp, NULL},
    { SWIG_prefix "boolp_assign", (swig_wrapper_func) _wrap_boolp_assign, NULL},
    { SWIG_prefix "boolp_value", (swig_wrapper_func) _wrap_boolp_value, NULL},
    { SWIG_prefix "new_EAutoGeneratep", (swig_wrapper_func) _wrap_new_EAutoGeneratep, NULL},
    { SWIG_prefix "copy_EAutoGeneratep", (swig_wrapper_func) _wrap_copy_EAutoGeneratep, NULL},
    { SWIG_prefix "delete_EAutoGeneratep", (swig_wrapper_func) _wrap_delete_EAutoGeneratep, NULL},
    { SWIG_prefix "EAutoGeneratep_assign", (swig_wrapper_func) _wrap_EAutoGeneratep_assign, NULL},
    { SWIG_prefix "EAutoGeneratep_value", (swig_wrapper_func) _wrap_EAutoGeneratep_value, NULL},
    { SWIG_prefix "new_EAutoSavep", (swig_wrapper_func) _wrap_new_EAutoSavep, NULL},
    { SWIG_prefix "copy_EAutoSavep", (swig_wrapper_func) _wrap_copy_EAutoSavep, NULL},
    { SWIG_prefix "delete_EAutoSavep", (swig_wrapper_func) _wrap_delete_EAutoSavep, NULL},
    { SWIG_prefix "EAutoSavep_assign", (swig_wrapper_func) _wrap_EAutoSavep_assign, NULL},
    { SWIG_prefix "EAutoSavep_value", (swig_wrapper_func) _wrap_EAutoSavep_value, NULL},
    { SWIG_prefix "new_CApplicationProcess", (swig_wrapper_func) _wrap_new_CApplicationProcess, NULL},
    { SWIG_prefix "delete_CApplicationProcess", (swig_wrapper_func) _wrap_delete_CApplicationProcess, NULL},
    { SWIG_prefix "CApplicationProcess_XDDfilename_set", (swig_wrapper_func) _wrap_CApplicationProcess_XDDfilename_set, NULL},
    { SWIG_prefix "CApplicationProcess_XDDfilename_get", (swig_wrapper_func) _wrap_CApplicationProcess_XDDfilename_get, NULL},
    { SWIG_prefix "CApplicationProcess_ProjectPath_set", (swig_wrapper_func) _wrap_CApplicationProcess_ProjectPath_set, NULL},
    { SWIG_prefix "CApplicationProcess_ProjectPath_get", (swig_wrapper_func) _wrap_CApplicationProcess_ProjectPath_get, NULL},
    { SWIG_prefix "CApplicationProcess_CDTCollection_set", (swig_wrapper_func) _wrap_CApplicationProcess_CDTCollection_set, NULL},
    { SWIG_prefix "CApplicationProcess_CDTCollection_get", (swig_wrapper_func) _wrap_CApplicationProcess_CDTCollection_get, NULL},
    { SWIG_prefix "CApplicationProcess_ParameterCollection_set", (swig_wrapper_func) _wrap_CApplicationProcess_ParameterCollection_set, NULL},
    { SWIG_prefix "CApplicationProcess_ParameterCollection_get", (swig_wrapper_func) _wrap_CApplicationProcess_ParameterCollection_get, NULL},
    { SWIG_prefix "CApplicationProcess_ParseXDDfile", (swig_wrapper_func) _wrap_CApplicationProcess_ParseXDDfile, NULL},
    { SWIG_prefix "CApplicationProcess_checkFileStatus", (swig_wrapper_func) _wrap_CApplicationProcess_checkFileStatus, NULL},
    { SWIG_prefix "CApplicationProcess_addComplexDataType", (swig_wrapper_func) _wrap_CApplicationProcess_addComplexDataType, NULL},
    { SWIG_prefix "CApplicationProcess_addParameter", (swig_wrapper_func) _wrap_CApplicationProcess_addParameter, NULL},
    { SWIG_prefix "CApplicationProcess_get_ParameterIndexby_UniqueIDRef", (swig_wrapper_func) _wrap_CApplicationProcess_get_ParameterIndexby_UniqueIDRef, NULL},
    { SWIG_prefix "CApplicationProcess_get_Parameterby_UniqueIDRef", (swig_wrapper_func) _wrap_CApplicationProcess_get_Parameterby_UniqueIDRef, NULL},
    { SWIG_prefix "CApplicationProcess_getCDTbyUniqueID", (swig_wrapper_func) _wrap_CApplicationProcess_getCDTbyUniqueID, NULL},
    { SWIG_prefix "CApplicationProcess_getCDTbydt_UniqueRefID", (swig_wrapper_func) _wrap_CApplicationProcess_getCDTbydt_UniqueRefID, NULL},
    { SWIG_prefix "CApplicationProcess_getCDTbydtIndex", (swig_wrapper_func) _wrap_CApplicationProcess_getCDTbydtIndex, NULL},
    { SWIG_prefix "CApplicationProcess_get_CDT_UniqueIDRef", (swig_wrapper_func) _wrap_CApplicationProcess_get_CDT_UniqueIDRef, NULL},
    { SWIG_prefix "CApplicationProcess_updatePreviousCDT_UId", (swig_wrapper_func) _wrap_CApplicationProcess_updatePreviousCDT_UId, NULL},
    { SWIG_prefix "CApplicationProcess_get_UniqueIDRef_by_ParameterIndex", (swig_wrapper_func) _wrap_CApplicationProcess_get_UniqueIDRef_by_ParameterIndex, NULL},
    { SWIG_prefix "CApplicationProcess_getCDTCount", (swig_wrapper_func) _wrap_CApplicationProcess_getCDTCount, NULL},
    { SWIG_prefix "CApplicationProcess_getCDTbyCount", (swig_wrapper_func) _wrap_CApplicationProcess_getCDTbyCount, NULL},
    { SWIG_prefix "CApplicationProcess", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CApplicationProcess},
    { SWIG_prefix "new_CBaseIndex", (swig_wrapper_func) _wrap_new_CBaseIndex, NULL},
    { SWIG_prefix "delete_CBaseIndex", (swig_wrapper_func) _wrap_delete_CBaseIndex, NULL},
    { SWIG_prefix "CBaseIndex_getName", (swig_wrapper_func) _wrap_CBaseIndex_getName, NULL},
    { SWIG_prefix "CBaseIndex_setName", (swig_wrapper_func) _wrap_CBaseIndex_setName, NULL},
    { SWIG_prefix "CBaseIndex_getIndexValue", (swig_wrapper_func) _wrap_CBaseIndex_getIndexValue, NULL},
    { SWIG_prefix "CBaseIndex_setIndexValue", (swig_wrapper_func) _wrap_CBaseIndex_setIndexValue, NULL},
    { SWIG_prefix "CBaseIndex_getDefaultValue", (swig_wrapper_func) _wrap_CBaseIndex_getDefaultValue, NULL},
    { SWIG_prefix "CBaseIndex_setDefaultValue", (swig_wrapper_func) _wrap_CBaseIndex_setDefaultValue, NULL},
    { SWIG_prefix "CBaseIndex_getActualValue", (swig_wrapper_func) _wrap_CBaseIndex_getActualValue, NULL},
    { SWIG_prefix "CBaseIndex_setActualValue", (swig_wrapper_func) _wrap_CBaseIndex_setActualValue, NULL},
    { SWIG_prefix "CBaseIndex_getAccessType", (swig_wrapper_func) _wrap_CBaseIndex_getAccessType, NULL},
    { SWIG_prefix "CBaseIndex_setAccessType", (swig_wrapper_func) _wrap_CBaseIndex_setAccessType, NULL},
    { SWIG_prefix "CBaseIndex_getLowLimit", (swig_wrapper_func) _wrap_CBaseIndex_getLowLimit, NULL},
    { SWIG_prefix "CBaseIndex_setLowLimit", (swig_wrapper_func) _wrap_CBaseIndex_setLowLimit, NULL},
    { SWIG_prefix "CBaseIndex_getHighLimit", (swig_wrapper_func) _wrap_CBaseIndex_getHighLimit, NULL},
    { SWIG_prefix "CBaseIndex_setHighLimit", (swig_wrapper_func) _wrap_CBaseIndex_setHighLimit, NULL},
    { SWIG_prefix "CBaseIndex_getDataType", (swig_wrapper_func) _wrap_CBaseIndex_getDataType, NULL},
    { SWIG_prefix "CBaseIndex_setDataType", (swig_wrapper_func) _wrap_CBaseIndex_setDataType, NULL},
    { SWIG_prefix "CBaseIndex_getPDOMapping", (swig_wrapper_func) _wrap_CBaseIndex_getPDOMapping, NULL},
    { SWIG_prefix "CBaseIndex_setPDOMapping", (swig_wrapper_func) _wrap_CBaseIndex_setPDOMapping, NULL},
    { SWIG_prefix "CBaseIndex_getObjectType", (swig_wrapper_func) _wrap_CBaseIndex_getObjectType, NULL},
    { SWIG_prefix "CBaseIndex_getEObjectType", (swig_wrapper_func) _wrap_CBaseIndex_getEObjectType, NULL},
    { SWIG_prefix "CBaseIndex_setObjectType", (swig_wrapper_func) _wrap_CBaseIndex_setObjectType, NULL},
    { SWIG_prefix "CBaseIndex_getNodeID", (swig_wrapper_func) _wrap_CBaseIndex_getNodeID, NULL},
    { SWIG_prefix "CBaseIndex_setNodeID", (swig_wrapper_func) _wrap_CBaseIndex_setNodeID, NULL},
    { SWIG_prefix "CBaseIndex_IsIndexVaueValid", (swig_wrapper_func) _wrap_CBaseIndex_IsIndexVaueValid, NULL},
    { SWIG_prefix "CBaseIndex_SaveChanges", (swig_wrapper_func) _wrap_CBaseIndex_SaveChanges, NULL},
    { SWIG_prefix "CBaseIndex_getUniqueIDRef", (swig_wrapper_func) _wrap_CBaseIndex_getUniqueIDRef, NULL},
    { SWIG_prefix "CBaseIndex_setUniqueIDRef", (swig_wrapper_func) _wrap_CBaseIndex_setUniqueIDRef, NULL},
    { SWIG_prefix "CBaseIndex_getDataTypeValue", (swig_wrapper_func) _wrap_CBaseIndex_getDataTypeValue, NULL},
    { SWIG_prefix "CBaseIndex_setDataTypeValue", (swig_wrapper_func) _wrap_CBaseIndex_setDataTypeValue, NULL},
    { SWIG_prefix "CBaseIndex_getFlagIfIncludedCdc", (swig_wrapper_func) _wrap_CBaseIndex_getFlagIfIncludedCdc, NULL},
    { SWIG_prefix "CBaseIndex_setFlagIfIncludedCdc", (swig_wrapper_func) _wrap_CBaseIndex_setFlagIfIncludedCdc, NULL},
    { SWIG_prefix "CBaseIndex_setDataTypeST", (swig_wrapper_func) _wrap_CBaseIndex_setDataTypeST, NULL},
    { SWIG_prefix "CBaseIndex", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CBaseIndex},
    { SWIG_prefix "new_CComplexDataType", (swig_wrapper_func) _wrap_new_CComplexDataType, NULL},
    { SWIG_prefix "delete_CComplexDataType", (swig_wrapper_func) _wrap_delete_CComplexDataType, NULL},
    { SWIG_prefix "CComplexDataType_varCollection_set", (swig_wrapper_func) _wrap_CComplexDataType_varCollection_set, NULL},
    { SWIG_prefix "CComplexDataType_varCollection_get", (swig_wrapper_func) _wrap_CComplexDataType_varCollection_get, NULL},
    { SWIG_prefix "CComplexDataType_VarIndex_set", (swig_wrapper_func) _wrap_CComplexDataType_VarIndex_set, NULL},
    { SWIG_prefix "CComplexDataType_VarIndex_get", (swig_wrapper_func) _wrap_CComplexDataType_VarIndex_get, NULL},
    { SWIG_prefix "CComplexDataType_Index_set", (swig_wrapper_func) _wrap_CComplexDataType_Index_set, NULL},
    { SWIG_prefix "CComplexDataType_Index_get", (swig_wrapper_func) _wrap_CComplexDataType_Index_get, NULL},
    { SWIG_prefix "CComplexDataType_previousCDT_UId_set", (swig_wrapper_func) _wrap_CComplexDataType_previousCDT_UId_set, NULL},
    { SWIG_prefix "CComplexDataType_previousCDT_UId_get", (swig_wrapper_func) _wrap_CComplexDataType_previousCDT_UId_get, NULL},
    { SWIG_prefix "CComplexDataType_name_id_attr_set", (swig_wrapper_func) _wrap_CComplexDataType_name_id_attr_set, NULL},
    { SWIG_prefix "CComplexDataType_name_id_attr_get", (swig_wrapper_func) _wrap_CComplexDataType_name_id_attr_get, NULL},
    { SWIG_prefix "CComplexDataType_addVarDeclaration", (swig_wrapper_func) _wrap_CComplexDataType_addVarDeclaration, NULL},
    { SWIG_prefix "CComplexDataType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CComplexDataType},
    { SWIG_prefix "ocfmRetCode_code_set", (swig_wrapper_func) _wrap_ocfmRetCode_code_set, NULL},
    { SWIG_prefix "ocfmRetCode_code_get", (swig_wrapper_func) _wrap_ocfmRetCode_code_get, NULL},
    { SWIG_prefix "ocfmRetCode_errorString_set", (swig_wrapper_func) _wrap_ocfmRetCode_errorString_set, NULL},
    { SWIG_prefix "ocfmRetCode_errorString_get", (swig_wrapper_func) _wrap_ocfmRetCode_errorString_get, NULL},
    { SWIG_prefix "new_ocfmRetCode", (swig_wrapper_func) _wrap_new_ocfmRetCode, NULL},
    { SWIG_prefix "delete_ocfmRetCode", (swig_wrapper_func) _wrap_delete_ocfmRetCode, NULL},
    { SWIG_prefix "ocfmRetCode", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ocfmRetCode},
    { SWIG_prefix "ocfmRetValError_errCode_set", (swig_wrapper_func) _wrap_ocfmRetValError_errCode_set, NULL},
    { SWIG_prefix "ocfmRetValError_errCode_get", (swig_wrapper_func) _wrap_ocfmRetValError_errCode_get, NULL},
    { SWIG_prefix "ocfmRetValError_returnValue_set", (swig_wrapper_func) _wrap_ocfmRetValError_returnValue_set, NULL},
    { SWIG_prefix "ocfmRetValError_returnValue_get", (swig_wrapper_func) _wrap_ocfmRetValError_returnValue_get, NULL},
    { SWIG_prefix "new_ocfmRetValError", (swig_wrapper_func) _wrap_new_ocfmRetValError, NULL},
    { SWIG_prefix "delete_ocfmRetValError", (swig_wrapper_func) _wrap_delete_ocfmRetValError, NULL},
    { SWIG_prefix "ocfmRetValError", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ocfmRetValError},
    { SWIG_prefix "new_CDataTypeCollection", (swig_wrapper_func) _wrap_new_CDataTypeCollection, NULL},
    { SWIG_prefix "delete_CDataTypeCollection", (swig_wrapper_func) _wrap_delete_CDataTypeCollection, NULL},
    { SWIG_prefix "CDataTypeCollection_addDataType", (swig_wrapper_func) _wrap_CDataTypeCollection_addDataType, NULL},
    { SWIG_prefix "CDataTypeCollection_DeleteDataTypeCollection", (swig_wrapper_func) _wrap_CDataTypeCollection_DeleteDataTypeCollection, NULL},
    { SWIG_prefix "CDataTypeCollection_getNumberOfDataTypes", (swig_wrapper_func) _wrap_CDataTypeCollection_getNumberOfDataTypes, NULL},
    { SWIG_prefix "CDataTypeCollection_getDataTypeElement", (swig_wrapper_func) _wrap_CDataTypeCollection_getDataTypeElement, NULL},
    { SWIG_prefix "CDataTypeCollection_getDataType", (swig_wrapper_func) _wrap_CDataTypeCollection_getDataType, NULL},
    { SWIG_prefix "CDataTypeCollection_getDataTypeByName", (swig_wrapper_func) _wrap_CDataTypeCollection_getDataTypeByName, NULL},
    { SWIG_prefix "CDataTypeCollection", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CDataTypeCollection},
    { SWIG_prefix "DataType_Name_set", (swig_wrapper_func) _wrap_DataType_Name_set, NULL},
    { SWIG_prefix "DataType_Name_get", (swig_wrapper_func) _wrap_DataType_Name_get, NULL},
    { SWIG_prefix "DataType_DataTypeValue_set", (swig_wrapper_func) _wrap_DataType_DataTypeValue_set, NULL},
    { SWIG_prefix "DataType_DataTypeValue_get", (swig_wrapper_func) _wrap_DataType_DataTypeValue_get, NULL},
    { SWIG_prefix "DataType_DataSize_set", (swig_wrapper_func) _wrap_DataType_DataSize_set, NULL},
    { SWIG_prefix "DataType_DataSize_get", (swig_wrapper_func) _wrap_DataType_DataSize_get, NULL},
    { SWIG_prefix "DataType_IEC_dt_set", (swig_wrapper_func) _wrap_DataType_IEC_dt_set, NULL},
    { SWIG_prefix "DataType_IEC_dt_get", (swig_wrapper_func) _wrap_DataType_IEC_dt_get, NULL},
    { SWIG_prefix "DataType_getName", (swig_wrapper_func) _wrap_DataType_getName, NULL},
    { SWIG_prefix "DataType_setName", (swig_wrapper_func) _wrap_DataType_setName, NULL},
    { SWIG_prefix "new_DataType", (swig_wrapper_func) _wrap_new_DataType, NULL},
    { SWIG_prefix "delete_DataType", (swig_wrapper_func) _wrap_delete_DataType, NULL},
    { SWIG_prefix "DataType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_DataType},
    { SWIG_prefix "appProcessCommon_m_Name_set", (swig_wrapper_func) _wrap_appProcessCommon_m_Name_set, NULL},
    { SWIG_prefix "appProcessCommon_m_Name_get", (swig_wrapper_func) _wrap_appProcessCommon_m_Name_get, NULL},
    { SWIG_prefix "appProcessCommon_UniqueId_set", (swig_wrapper_func) _wrap_appProcessCommon_UniqueId_set, NULL},
    { SWIG_prefix "appProcessCommon_UniqueId_get", (swig_wrapper_func) _wrap_appProcessCommon_UniqueId_get, NULL},
    { SWIG_prefix "appProcessCommon_dataType_set", (swig_wrapper_func) _wrap_appProcessCommon_dataType_set, NULL},
    { SWIG_prefix "appProcessCommon_dataType_get", (swig_wrapper_func) _wrap_appProcessCommon_dataType_get, NULL},
    { SWIG_prefix "appProcessCommon_dataTypeUniqueIDRef_set", (swig_wrapper_func) _wrap_appProcessCommon_dataTypeUniqueIDRef_set, NULL},
    { SWIG_prefix "appProcessCommon_dataTypeUniqueIDRef_get", (swig_wrapper_func) _wrap_appProcessCommon_dataTypeUniqueIDRef_get, NULL},
    { SWIG_prefix "appProcessCommon_getUniqueID", (swig_wrapper_func) _wrap_appProcessCommon_getUniqueID, NULL},
    { SWIG_prefix "appProcessCommon_setUniqueID", (swig_wrapper_func) _wrap_appProcessCommon_setUniqueID, NULL},
    { SWIG_prefix "appProcessCommon_getName", (swig_wrapper_func) _wrap_appProcessCommon_getName, NULL},
    { SWIG_prefix "appProcessCommon_setName", (swig_wrapper_func) _wrap_appProcessCommon_setName, NULL},
    { SWIG_prefix "appProcessCommon_getDataType", (swig_wrapper_func) _wrap_appProcessCommon_getDataType, NULL},
    { SWIG_prefix "appProcessCommon_setDataType", (swig_wrapper_func) _wrap_appProcessCommon_setDataType, NULL},
    { SWIG_prefix "appProcessCommon_getDtUniqueRefId", (swig_wrapper_func) _wrap_appProcessCommon_getDtUniqueRefId, NULL},
    { SWIG_prefix "appProcessCommon_setDtUniqueRefId", (swig_wrapper_func) _wrap_appProcessCommon_setDtUniqueRefId, NULL},
    { SWIG_prefix "new_appProcessCommon", (swig_wrapper_func) _wrap_new_appProcessCommon, NULL},
    { SWIG_prefix "delete_appProcessCommon", (swig_wrapper_func) _wrap_delete_appProcessCommon, NULL},
    { SWIG_prefix "appProcessCommon", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_appProcessCommon},
    { SWIG_prefix "varDeclaration_nam_id_dt_attr_set", (swig_wrapper_func) _wrap_varDeclaration_nam_id_dt_attr_set, NULL},
    { SWIG_prefix "varDeclaration_nam_id_dt_attr_get", (swig_wrapper_func) _wrap_varDeclaration_nam_id_dt_attr_get, NULL},
    { SWIG_prefix "varDeclaration_size_set", (swig_wrapper_func) _wrap_varDeclaration_size_set, NULL},
    { SWIG_prefix "varDeclaration_size_get", (swig_wrapper_func) _wrap_varDeclaration_size_get, NULL},
    { SWIG_prefix "varDeclaration_InitialValue_set", (swig_wrapper_func) _wrap_varDeclaration_InitialValue_set, NULL},
    { SWIG_prefix "varDeclaration_InitialValue_get", (swig_wrapper_func) _wrap_varDeclaration_InitialValue_get, NULL},
    { SWIG_prefix "varDeclaration_StructUniqueId_set", (swig_wrapper_func) _wrap_varDeclaration_StructUniqueId_set, NULL},
    { SWIG_prefix "varDeclaration_StructUniqueId_get", (swig_wrapper_func) _wrap_varDeclaration_StructUniqueId_get, NULL},
    { SWIG_prefix "varDeclaration_Initialize", (swig_wrapper_func) _wrap_varDeclaration_Initialize, NULL},
    { SWIG_prefix "new_varDeclaration", (swig_wrapper_func) _wrap_new_varDeclaration, NULL},
    { SWIG_prefix "delete_varDeclaration", (swig_wrapper_func) _wrap_delete_varDeclaration, NULL},
    { SWIG_prefix "varDeclaration", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_varDeclaration},
    { SWIG_prefix "Parameter_name_id_dt_attr_set", (swig_wrapper_func) _wrap_Parameter_name_id_dt_attr_set, NULL},
    { SWIG_prefix "Parameter_name_id_dt_attr_get", (swig_wrapper_func) _wrap_Parameter_name_id_dt_attr_get, NULL},
    { SWIG_prefix "Parameter_dataType_set", (swig_wrapper_func) _wrap_Parameter_dataType_set, NULL},
    { SWIG_prefix "Parameter_dataType_get", (swig_wrapper_func) _wrap_Parameter_dataType_get, NULL},
    { SWIG_prefix "Parameter_StructIndex_set", (swig_wrapper_func) _wrap_Parameter_StructIndex_set, NULL},
    { SWIG_prefix "Parameter_StructIndex_get", (swig_wrapper_func) _wrap_Parameter_StructIndex_get, NULL},
    { SWIG_prefix "Parameter_access_set", (swig_wrapper_func) _wrap_Parameter_access_set, NULL},
    { SWIG_prefix "Parameter_access_get", (swig_wrapper_func) _wrap_Parameter_access_get, NULL},
    { SWIG_prefix "Parameter_ParaIndex_set", (swig_wrapper_func) _wrap_Parameter_ParaIndex_set, NULL},
    { SWIG_prefix "Parameter_ParaIndex_get", (swig_wrapper_func) _wrap_Parameter_ParaIndex_get, NULL},
    { SWIG_prefix "new_Parameter", (swig_wrapper_func) _wrap_new_Parameter, NULL},
    { SWIG_prefix "delete_Parameter", (swig_wrapper_func) _wrap_delete_Parameter, NULL},
    { SWIG_prefix "Parameter", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Parameter},
    { SWIG_prefix "MNPdoVariable_Index_set", (swig_wrapper_func) _wrap_MNPdoVariable_Index_set, NULL},
    { SWIG_prefix "MNPdoVariable_Index_get", (swig_wrapper_func) _wrap_MNPdoVariable_Index_get, NULL},
    { SWIG_prefix "MNPdoVariable_SubIndex_set", (swig_wrapper_func) _wrap_MNPdoVariable_SubIndex_set, NULL},
    { SWIG_prefix "MNPdoVariable_SubIndex_get", (swig_wrapper_func) _wrap_MNPdoVariable_SubIndex_get, NULL},
    { SWIG_prefix "MNPdoVariable_Offset_set", (swig_wrapper_func) _wrap_MNPdoVariable_Offset_set, NULL},
    { SWIG_prefix "MNPdoVariable_Offset_get", (swig_wrapper_func) _wrap_MNPdoVariable_Offset_get, NULL},
    { SWIG_prefix "MNPdoVariable_Value_set", (swig_wrapper_func) _wrap_MNPdoVariable_Value_set, NULL},
    { SWIG_prefix "MNPdoVariable_Value_get", (swig_wrapper_func) _wrap_MNPdoVariable_Value_get, NULL},
    { SWIG_prefix "MNPdoVariable_DataSize_set", (swig_wrapper_func) _wrap_MNPdoVariable_DataSize_set, NULL},
    { SWIG_prefix "MNPdoVariable_DataSize_get", (swig_wrapper_func) _wrap_MNPdoVariable_DataSize_get, NULL},
    { SWIG_prefix "MNPdoVariable_pdoType_set", (swig_wrapper_func) _wrap_MNPdoVariable_pdoType_set, NULL},
    { SWIG_prefix "MNPdoVariable_pdoType_get", (swig_wrapper_func) _wrap_MNPdoVariable_pdoType_get, NULL},
    { SWIG_prefix "new_MNPdoVariable", (swig_wrapper_func) _wrap_new_MNPdoVariable, NULL},
    { SWIG_prefix "delete_MNPdoVariable", (swig_wrapper_func) _wrap_delete_MNPdoVariable, NULL},
    { SWIG_prefix "MNPdoVariable", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_MNPdoVariable},
    { SWIG_prefix "ImportXML", (swig_wrapper_func) _wrap_ImportXML, NULL},
    { SWIG_prefix "ReImportXML", (swig_wrapper_func) _wrap_ReImportXML, NULL},
    { SWIG_prefix "GenerateXAP", (swig_wrapper_func) _wrap_GenerateXAP, NULL},
    { SWIG_prefix "GenerateCDC", (swig_wrapper_func) _wrap_GenerateCDC, NULL},
    { SWIG_prefix "CreateNode", (swig_wrapper_func) _wrap_CreateNode, NULL},
    { SWIG_prefix "parseFile", (swig_wrapper_func) _wrap_parseFile, NULL},
    { SWIG_prefix "DeleteNode", (swig_wrapper_func) _wrap_DeleteNode, NULL},
    { SWIG_prefix "DeleteNodeObjDict", (swig_wrapper_func) _wrap_DeleteNodeObjDict, NULL},
    { SWIG_prefix "DeleteIndex", (swig_wrapper_func) _wrap_DeleteIndex, NULL},
    { SWIG_prefix "DeleteSubIndex", (swig_wrapper_func) _wrap_DeleteSubIndex, NULL},
    { SWIG_prefix "AddIndex", (swig_wrapper_func) _wrap_AddIndex, NULL},
    { SWIG_prefix "AddSubIndex", (swig_wrapper_func) _wrap_AddSubIndex, NULL},
    { SWIG_prefix "SetIndexAttributes", (swig_wrapper_func) _wrap_SetIndexAttributes, NULL},
    { SWIG_prefix "SetSubIndexAttributes", (swig_wrapper_func) _wrap_SetSubIndexAttributes, NULL},
    { SWIG_prefix "DisplayNodeTree", (swig_wrapper_func) _wrap_DisplayNodeTree, NULL},
    { SWIG_prefix "IfNodeExists", (swig_wrapper_func) _wrap_IfNodeExists, NULL},
    { SWIG_prefix "IfIndexExists", (swig_wrapper_func) _wrap_IfIndexExists, NULL},
    { SWIG_prefix "IfSubIndexExists", (swig_wrapper_func) _wrap_IfSubIndexExists, NULL},
    { SWIG_prefix "GetIndexAttributes", (swig_wrapper_func) _wrap_GetIndexAttributes, NULL},
    { SWIG_prefix "GetSubIndexAttributes", (swig_wrapper_func) _wrap_GetSubIndexAttributes, NULL},
    { SWIG_prefix "GetNodeCount", (swig_wrapper_func) _wrap_GetNodeCount, NULL},
    { SWIG_prefix "GetIndexCount", (swig_wrapper_func) _wrap_GetIndexCount, NULL},
    { SWIG_prefix "GetSubIndexCount", (swig_wrapper_func) _wrap_GetSubIndexCount, NULL},
    { SWIG_prefix "GetNodeAttributesbyNodePos", (swig_wrapper_func) _wrap_GetNodeAttributesbyNodePos, NULL},
    { SWIG_prefix "GetIndexIDbyIndexPos", (swig_wrapper_func) _wrap_GetIndexIDbyIndexPos, NULL},
    { SWIG_prefix "GetSubIndexIDbySubIndexPos", (swig_wrapper_func) _wrap_GetSubIndexIDbySubIndexPos, NULL},
    { SWIG_prefix "GetIndexIDbyPositions", (swig_wrapper_func) _wrap_GetIndexIDbyPositions, NULL},
    { SWIG_prefix "GetSubIndexIDbyPositions", (swig_wrapper_func) _wrap_GetSubIndexIDbyPositions, NULL},
    { SWIG_prefix "GetIndexAttributesbyPositions", (swig_wrapper_func) _wrap_GetIndexAttributesbyPositions, NULL},
    { SWIG_prefix "GetSubIndexAttributesbyPositions", (swig_wrapper_func) _wrap_GetSubIndexAttributesbyPositions, NULL},
    { SWIG_prefix "LoadObjectDictionary", (swig_wrapper_func) _wrap_LoadObjectDictionary, NULL},
    { SWIG_prefix "SaveNode", (swig_wrapper_func) _wrap_SaveNode, NULL},
    { SWIG_prefix "SaveProject", (swig_wrapper_func) _wrap_SaveProject, NULL},
    { SWIG_prefix "OpenProject", (swig_wrapper_func) _wrap_OpenProject, NULL},
    { SWIG_prefix "GetProjectSettings", (swig_wrapper_func) _wrap_GetProjectSettings, NULL},
    { SWIG_prefix "SetProjectSettings", (swig_wrapper_func) _wrap_SetProjectSettings, NULL},
    { SWIG_prefix "GenerateMNOBD", (swig_wrapper_func) _wrap_GenerateMNOBD, NULL},
    { SWIG_prefix "SetALLIndexAttributes", (swig_wrapper_func) _wrap_SetALLIndexAttributes, NULL},
    { SWIG_prefix "SetALLSubIndexAttributes", (swig_wrapper_func) _wrap_SetALLSubIndexAttributes, NULL},
    { SWIG_prefix "new_CIndexCollection", (swig_wrapper_func) _wrap_new_CIndexCollection, NULL},
    { SWIG_prefix "delete_CIndexCollection", (swig_wrapper_func) _wrap_delete_CIndexCollection, NULL},
    { SWIG_prefix "CIndexCollection_addIndex", (swig_wrapper_func) _wrap_CIndexCollection_addIndex, NULL},
    { SWIG_prefix "CIndexCollection_deleteIndex", (swig_wrapper_func) _wrap_CIndexCollection_deleteIndex, NULL},
    { SWIG_prefix "CIndexCollection_DeleteIndexCollection", (swig_wrapper_func) _wrap_CIndexCollection_DeleteIndexCollection, NULL},
    { SWIG_prefix "CIndexCollection_getNumberofIndexes", (swig_wrapper_func) _wrap_CIndexCollection_getNumberofIndexes, NULL},
    { SWIG_prefix "CIndexCollection_getIndex", (swig_wrapper_func) _wrap_CIndexCollection_getIndex, NULL},
    { SWIG_prefix "CIndexCollection_getIndexbyIndexValue", (swig_wrapper_func) _wrap_CIndexCollection_getIndexbyIndexValue, NULL},
    { SWIG_prefix "CIndexCollection", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CIndexCollection},
    { SWIG_prefix "new_CIndex", (swig_wrapper_func) _wrap_new_CIndex, NULL},
    { SWIG_prefix "delete_CIndex", (swig_wrapper_func) _wrap_delete_CIndex, NULL},
    { SWIG_prefix "CIndex_addSubIndex", (swig_wrapper_func) _wrap_CIndex_addSubIndex, NULL},
    { SWIG_prefix "CIndex_deleteSubIndex", (swig_wrapper_func) _wrap_CIndex_deleteSubIndex, NULL},
    { SWIG_prefix "CIndex_getNumberofSubIndexes", (swig_wrapper_func) _wrap_CIndex_getNumberofSubIndexes, NULL},
    { SWIG_prefix "CIndex_getSubIndex", (swig_wrapper_func) _wrap_CIndex_getSubIndex, NULL},
    { SWIG_prefix "CIndex_getPDOType", (swig_wrapper_func) _wrap_CIndex_getPDOType, NULL},
    { SWIG_prefix "CIndex_setPDOType", (swig_wrapper_func) _wrap_CIndex_setPDOType, NULL},
    { SWIG_prefix "CIndex_getSubIndexbyIndexValue", (swig_wrapper_func) _wrap_CIndex_getSubIndexbyIndexValue, NULL},
    { SWIG_prefix "CIndex", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CIndex},
    { SWIG_prefix "new_CNodeCollection", (swig_wrapper_func) _wrap_new_CNodeCollection, NULL},
    { SWIG_prefix "delete_CNodeCollection", (swig_wrapper_func) _wrap_delete_CNodeCollection, NULL},
    { SWIG_prefix "CNodeCollection_getNumberOfNodes", (swig_wrapper_func) _wrap_CNodeCollection_getNumberOfNodes, NULL},
    { SWIG_prefix "CNodeCollection_addNode", (swig_wrapper_func) _wrap_CNodeCollection_addNode, NULL},
    { SWIG_prefix "CNodeCollection_deleteNode", (swig_wrapper_func) _wrap_CNodeCollection_deleteNode, NULL},
    { SWIG_prefix "CNodeCollection_getNodeColObjectPointer", (swig_wrapper_func) _wrap_CNodeCollection_getNodeColObjectPointer, NULL},
    { SWIG_prefix "CNodeCollection_getNode", (swig_wrapper_func) _wrap_CNodeCollection_getNode, NULL},
    { SWIG_prefix "CNodeCollection_getNodebyCollectionIndex", (swig_wrapper_func) _wrap_CNodeCollection_getNodebyCollectionIndex, NULL},
    { SWIG_prefix "CNodeCollection_getMNNode", (swig_wrapper_func) _wrap_CNodeCollection_getMNNode, NULL},
    { SWIG_prefix "CNodeCollection_getNodePtr", (swig_wrapper_func) _wrap_CNodeCollection_getNodePtr, NULL},
    { SWIG_prefix "CNodeCollection_getNodebyColIndex", (swig_wrapper_func) _wrap_CNodeCollection_getNodebyColIndex, NULL},
    { SWIG_prefix "CNodeCollection_getCNNodesCount", (swig_wrapper_func) _wrap_CNodeCollection_getCNNodesCount, NULL},
    { SWIG_prefix "CNodeCollection_getNodeColObject", (swig_wrapper_func) _wrap_CNodeCollection_getNodeColObject, NULL},
    { SWIG_prefix "CNodeCollection", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CNodeCollection},
    { SWIG_prefix "new_CNode", (swig_wrapper_func) _wrap_new_CNode, NULL},
    { SWIG_prefix "delete_CNode", (swig_wrapper_func) _wrap_delete_CNode, NULL},
    { SWIG_prefix "CNode_ProcessImageCollection_set", (swig_wrapper_func) _wrap_CNode_ProcessImageCollection_set, NULL},
    { SWIG_prefix "CNode_ProcessImageCollection_get", (swig_wrapper_func) _wrap_CNode_ProcessImageCollection_get, NULL},
    { SWIG_prefix "CNode_MNPDOINVarCollection_set", (swig_wrapper_func) _wrap_CNode_MNPDOINVarCollection_set, NULL},
    { SWIG_prefix "CNode_MNPDOINVarCollection_get", (swig_wrapper_func) _wrap_CNode_MNPDOINVarCollection_get, NULL},
    { SWIG_prefix "CNode_MNPDOOUTVarCollection_set", (swig_wrapper_func) _wrap_CNode_MNPDOOUTVarCollection_set, NULL},
    { SWIG_prefix "CNode_MNPDOOUTVarCollection_get", (swig_wrapper_func) _wrap_CNode_MNPDOOUTVarCollection_get, NULL},
    { SWIG_prefix "CNode_getDataTypeCollection", (swig_wrapper_func) _wrap_CNode_getDataTypeCollection, NULL},
    { SWIG_prefix "CNode_getIndexCollection", (swig_wrapper_func) _wrap_CNode_getIndexCollection, NULL},
    { SWIG_prefix "CNode_getApplicationProcess", (swig_wrapper_func) _wrap_CNode_getApplicationProcess, NULL},
    { SWIG_prefix "CNode_getNodeId", (swig_wrapper_func) _wrap_CNode_getNodeId, NULL},
    { SWIG_prefix "CNode_setNodeId", (swig_wrapper_func) _wrap_CNode_setNodeId, NULL},
    { SWIG_prefix "CNode_getNodeIndex", (swig_wrapper_func) _wrap_CNode_getNodeIndex, NULL},
    { SWIG_prefix "CNode_setNodeIndex", (swig_wrapper_func) _wrap_CNode_setNodeIndex, NULL},
    { SWIG_prefix "CNode_getNodeName", (swig_wrapper_func) _wrap_CNode_getNodeName, NULL},
    { SWIG_prefix "CNode_setNodeName", (swig_wrapper_func) _wrap_CNode_setNodeName, NULL},
    { SWIG_prefix "CNode_getNodeType", (swig_wrapper_func) _wrap_CNode_getNodeType, NULL},
    { SWIG_prefix "CNode_setNodeType", (swig_wrapper_func) _wrap_CNode_setNodeType, NULL},
    { SWIG_prefix "CNode_HasPdoObjects", (swig_wrapper_func) _wrap_CNode_HasPdoObjects, NULL},
    { SWIG_prefix "CNode_setFlagForPdoObjects", (swig_wrapper_func) _wrap_CNode_setFlagForPdoObjects, NULL},
    { SWIG_prefix "CNode_CreateIndexCollection", (swig_wrapper_func) _wrap_CNode_CreateIndexCollection, NULL},
    { SWIG_prefix "CNode_CreateDataTypeCollection", (swig_wrapper_func) _wrap_CNode_CreateDataTypeCollection, NULL},
    { SWIG_prefix "CNode_CreateApplicationProcess", (swig_wrapper_func) _wrap_CNode_CreateApplicationProcess, NULL},
    { SWIG_prefix "CNode_addProcessImage", (swig_wrapper_func) _wrap_CNode_addProcessImage, NULL},
    { SWIG_prefix "CNode_addMNPDOvar", (swig_wrapper_func) _wrap_CNode_addMNPDOvar, NULL},
    { SWIG_prefix "CNode_getIndexCollectionWithoutPDO", (swig_wrapper_func) _wrap_CNode_getIndexCollectionWithoutPDO, NULL},
    { SWIG_prefix "CNode_getPDOIndexCollection", (swig_wrapper_func) _wrap_CNode_getPDOIndexCollection, NULL},
    { SWIG_prefix "CNode_getPIbyParaIndex", (swig_wrapper_func) _wrap_CNode_getPIbyParaIndex, NULL},
    { SWIG_prefix "CNode_DeleteCollectionsForPI", (swig_wrapper_func) _wrap_CNode_DeleteCollectionsForPI, NULL},
    { SWIG_prefix "CNode_isNull", (swig_wrapper_func) _wrap_CNode_isNull, NULL},
    { SWIG_prefix "CNode", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CNode},
    { SWIG_prefix "new_CSubIndex", (swig_wrapper_func) _wrap_new_CSubIndex, NULL},
    { SWIG_prefix "delete_CSubIndex", (swig_wrapper_func) _wrap_delete_CSubIndex, NULL},
    { SWIG_prefix "CSubIndex", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CSubIndex},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "MN_NODEID", 0, (swig_variable_func) _wrap_MN_NODEID_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "OFFSET_INTEGER_8", 0, (swig_variable_func) _wrap_OFFSET_INTEGER_8_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "OFFSET_UNSIGNED_INTEGER_8", 0, (swig_variable_func) _wrap_OFFSET_UNSIGNED_INTEGER_8_get,(swig_variable_func) swig_readonly},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CSubIndexTo_p_CBaseIndex(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CBaseIndex *)  ((CSubIndex *) x));
}
static void *_p_CIndexTo_p_CBaseIndex(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CBaseIndex *)  ((CIndex *) x));
}
static swig_type_info _swigt__p_CApplicationProcess = {"_p_CApplicationProcess", "CApplicationProcess *", 0, 0, (void*)&_wrap_class_CApplicationProcess, 0};
static swig_type_info _swigt__p_CBaseIndex = {"_p_CBaseIndex", "CBaseIndex *", 0, 0, (void*)&_wrap_class_CBaseIndex, 0};
static swig_type_info _swigt__p_CComplexDataType = {"_p_CComplexDataType", "CComplexDataType *", 0, 0, (void*)&_wrap_class_CComplexDataType, 0};
static swig_type_info _swigt__p_CDataTypeCollection = {"_p_CDataTypeCollection", "CDataTypeCollection *", 0, 0, (void*)&_wrap_class_CDataTypeCollection, 0};
static swig_type_info _swigt__p_CIndex = {"_p_CIndex", "CIndex *", 0, 0, (void*)&_wrap_class_CIndex, 0};
static swig_type_info _swigt__p_CIndexCollection = {"_p_CIndexCollection", "CIndexCollection *", 0, 0, (void*)&_wrap_class_CIndexCollection, 0};
static swig_type_info _swigt__p_CNode = {"_p_CNode", "CNode *", 0, 0, (void*)&_wrap_class_CNode, 0};
static swig_type_info _swigt__p_CNodeCollection = {"_p_CNodeCollection", "CNodeCollection *", 0, 0, (void*)&_wrap_class_CNodeCollection, 0};
static swig_type_info _swigt__p_CSubIndex = {"_p_CSubIndex", "CSubIndex *", 0, 0, (void*)&_wrap_class_CSubIndex, 0};
static swig_type_info _swigt__p_DataType = {"_p_DataType", "DataType *", 0, 0, (void*)&_wrap_class_DataType, 0};
static swig_type_info _swigt__p_EAttributeType = {"_p_EAttributeType", "enum EAttributeType *|EAttributeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EAutoGenerate = {"_p_EAutoGenerate", "enum EAutoGenerate *|EAutoGenerate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EAutoSave = {"_p_EAutoSave", "enum EAutoSave *|EAutoSave *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EConfiuguratorErrors = {"_p_EConfiuguratorErrors", "enum EConfiuguratorErrors *|EConfiuguratorErrors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EFlag = {"_p_EFlag", "enum EFlag *|EFlag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ENodeType = {"_p_ENodeType", "enum ENodeType *|ENodeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EObjectType = {"_p_EObjectType", "enum EObjectType *|EObjectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EPDOMapping = {"_p_EPDOMapping", "enum EPDOMapping *|EPDOMapping *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EPDOType = {"_p_EPDOType", "enum EPDOType *|EPDOType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EParameterAccess = {"_p_EParameterAccess", "enum EParameterAccess *|EParameterAccess *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EProjectSettings = {"_p_EProjectSettings", "enum EProjectSettings *|EProjectSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IEC_Datatype = {"_p_IEC_Datatype", "enum IEC_Datatype *|IEC_Datatype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MNPdoVariable = {"_p_MNPdoVariable", "MNPdoVariable *", 0, 0, (void*)&_wrap_class_MNPdoVariable, 0};
static swig_type_info _swigt__p_Parameter = {"_p_Parameter", "Parameter *", 0, 0, (void*)&_wrap_class_Parameter, 0};
static swig_type_info _swigt__p_ProcessImage = {"_p_ProcessImage", "ProcessImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCollectionT_CComplexDataType_t = {"_p_TCollectionT_CComplexDataType_t", "TCollection< CComplexDataType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCollectionT_MNPdoVariable_t = {"_p_TCollectionT_MNPdoVariable_t", "TCollection< MNPdoVariable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCollectionT_Parameter_t = {"_p_TCollectionT_Parameter_t", "TCollection< Parameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCollectionT_ProcessImage_t = {"_p_TCollectionT_ProcessImage_t", "TCollection< ProcessImage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCollectionT_varDeclaration_t = {"_p_TCollectionT_varDeclaration_t", "TCollection< varDeclaration > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_appProcessCommon = {"_p_appProcessCommon", "appProcessCommon *", 0, 0, (void*)&_wrap_class_appProcessCommon, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CHAR *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ocfmRetCode = {"_p_ocfmRetCode", "ocfmRetCode *", 0, 0, (void*)&_wrap_class_ocfmRetCode, 0};
static swig_type_info _swigt__p_ocfmRetValError = {"_p_ocfmRetValError", "ocfmRetValError *", 0, 0, (void*)&_wrap_class_ocfmRetValError, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|UINT8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "UINT32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|UINT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_varDeclaration = {"_p_varDeclaration", "varDeclaration *", 0, 0, (void*)&_wrap_class_varDeclaration, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CApplicationProcess,
  &_swigt__p_CBaseIndex,
  &_swigt__p_CComplexDataType,
  &_swigt__p_CDataTypeCollection,
  &_swigt__p_CIndex,
  &_swigt__p_CIndexCollection,
  &_swigt__p_CNode,
  &_swigt__p_CNodeCollection,
  &_swigt__p_CSubIndex,
  &_swigt__p_DataType,
  &_swigt__p_EAttributeType,
  &_swigt__p_EAutoGenerate,
  &_swigt__p_EAutoSave,
  &_swigt__p_EConfiuguratorErrors,
  &_swigt__p_EFlag,
  &_swigt__p_ENodeType,
  &_swigt__p_EObjectType,
  &_swigt__p_EPDOMapping,
  &_swigt__p_EPDOType,
  &_swigt__p_EParameterAccess,
  &_swigt__p_EProjectSettings,
  &_swigt__p_IEC_Datatype,
  &_swigt__p_MNPdoVariable,
  &_swigt__p_Parameter,
  &_swigt__p_ProcessImage,
  &_swigt__p_TCollectionT_CComplexDataType_t,
  &_swigt__p_TCollectionT_MNPdoVariable_t,
  &_swigt__p_TCollectionT_Parameter_t,
  &_swigt__p_TCollectionT_ProcessImage_t,
  &_swigt__p_TCollectionT_varDeclaration_t,
  &_swigt__p_appProcessCommon,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_ocfmRetCode,
  &_swigt__p_ocfmRetValError,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_varDeclaration,
};

static swig_cast_info _swigc__p_CApplicationProcess[] = {  {&_swigt__p_CApplicationProcess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBaseIndex[] = {  {&_swigt__p_CBaseIndex, 0, 0, 0},  {&_swigt__p_CSubIndex, _p_CSubIndexTo_p_CBaseIndex, 0, 0},  {&_swigt__p_CIndex, _p_CIndexTo_p_CBaseIndex, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CComplexDataType[] = {  {&_swigt__p_CComplexDataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CDataTypeCollection[] = {  {&_swigt__p_CDataTypeCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CIndex[] = {  {&_swigt__p_CIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CIndexCollection[] = {  {&_swigt__p_CIndexCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CNode[] = {  {&_swigt__p_CNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CNodeCollection[] = {  {&_swigt__p_CNodeCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSubIndex[] = {  {&_swigt__p_CSubIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataType[] = {  {&_swigt__p_DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EAttributeType[] = {  {&_swigt__p_EAttributeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EAutoGenerate[] = {  {&_swigt__p_EAutoGenerate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EAutoSave[] = {  {&_swigt__p_EAutoSave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EConfiuguratorErrors[] = {  {&_swigt__p_EConfiuguratorErrors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EFlag[] = {  {&_swigt__p_EFlag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ENodeType[] = {  {&_swigt__p_ENodeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EObjectType[] = {  {&_swigt__p_EObjectType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EPDOMapping[] = {  {&_swigt__p_EPDOMapping, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EPDOType[] = {  {&_swigt__p_EPDOType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EParameterAccess[] = {  {&_swigt__p_EParameterAccess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EProjectSettings[] = {  {&_swigt__p_EProjectSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IEC_Datatype[] = {  {&_swigt__p_IEC_Datatype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MNPdoVariable[] = {  {&_swigt__p_MNPdoVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Parameter[] = {  {&_swigt__p_Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProcessImage[] = {  {&_swigt__p_ProcessImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCollectionT_CComplexDataType_t[] = {  {&_swigt__p_TCollectionT_CComplexDataType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCollectionT_MNPdoVariable_t[] = {  {&_swigt__p_TCollectionT_MNPdoVariable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCollectionT_Parameter_t[] = {  {&_swigt__p_TCollectionT_Parameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCollectionT_ProcessImage_t[] = {  {&_swigt__p_TCollectionT_ProcessImage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCollectionT_varDeclaration_t[] = {  {&_swigt__p_TCollectionT_varDeclaration_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_appProcessCommon[] = {  {&_swigt__p_appProcessCommon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ocfmRetCode[] = {  {&_swigt__p_ocfmRetCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ocfmRetValError[] = {  {&_swigt__p_ocfmRetValError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_varDeclaration[] = {  {&_swigt__p_varDeclaration, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CApplicationProcess,
  _swigc__p_CBaseIndex,
  _swigc__p_CComplexDataType,
  _swigc__p_CDataTypeCollection,
  _swigc__p_CIndex,
  _swigc__p_CIndexCollection,
  _swigc__p_CNode,
  _swigc__p_CNodeCollection,
  _swigc__p_CSubIndex,
  _swigc__p_DataType,
  _swigc__p_EAttributeType,
  _swigc__p_EAutoGenerate,
  _swigc__p_EAutoSave,
  _swigc__p_EConfiuguratorErrors,
  _swigc__p_EFlag,
  _swigc__p_ENodeType,
  _swigc__p_EObjectType,
  _swigc__p_EPDOMapping,
  _swigc__p_EPDOType,
  _swigc__p_EParameterAccess,
  _swigc__p_EProjectSettings,
  _swigc__p_IEC_Datatype,
  _swigc__p_MNPdoVariable,
  _swigc__p_Parameter,
  _swigc__p_ProcessImage,
  _swigc__p_TCollectionT_CComplexDataType_t,
  _swigc__p_TCollectionT_MNPdoVariable_t,
  _swigc__p_TCollectionT_Parameter_t,
  _swigc__p_TCollectionT_ProcessImage_t,
  _swigc__p_TCollectionT_varDeclaration_t,
  _swigc__p_appProcessCommon,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_ocfmRetCode,
  _swigc__p_ocfmRetValError,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_varDeclaration,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  if (Tcl_InitStubs(interp, (char*)"8.1", 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_SUCCESS", SWIG_From_int(static_cast< int >(OCFM_ERR_SUCCESS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_FILE_NOT_PRESENT", SWIG_From_int(static_cast< int >(OCFM_ERR_FILE_NOT_PRESENT)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_FILE_CANNOT_OPEN", SWIG_From_int(static_cast< int >(OCFM_ERR_FILE_CANNOT_OPEN)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_NODEID", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_NODEID)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_NODEPOS", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_NODEPOS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_NODETYPE", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_NODETYPE)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_INDEXID", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_INDEXID)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_INDEXPOS", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_INDEXPOS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_SUBINDEXID", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_SUBINDEXID)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_SUBINDEXPOS", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_SUBINDEXPOS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_ATTRIBUTETYPE", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_ATTRIBUTETYPE)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_NO_NODES_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_NO_NODES_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_NO_INDEX_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_NO_INDEX_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_NO_SUBINDEXS_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_NO_SUBINDEXS_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_NODEID_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_NODEID_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INDEXID_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_INDEXID_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_SUBINDEXID_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_SUBINDEXID_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_NODE_ALREADY_EXISTS", SWIG_From_int(static_cast< int >(OCFM_ERR_NODE_ALREADY_EXISTS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INDEX_ALREADY_EXISTS", SWIG_From_int(static_cast< int >(OCFM_ERR_INDEX_ALREADY_EXISTS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_SUBINDEX_ALREADY_EXISTS", SWIG_From_int(static_cast< int >(OCFM_ERR_SUBINDEX_ALREADY_EXISTS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_VALUE", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_VALUE)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_NAME", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_NAME)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_XML_FILE_CORRUPTED", SWIG_From_int(static_cast< int >(OCFM_ERR_XML_FILE_CORRUPTED)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_CANNOT_OPEN_FILE", SWIG_From_int(static_cast< int >(OCFM_ERR_CANNOT_OPEN_FILE)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_PARSE_XML", SWIG_From_int(static_cast< int >(OCFM_ERR_PARSE_XML)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_MODULE_INDEX_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_MODULE_INDEX_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_MODULE_SUBINDEX_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_MODULE_SUBINDEX_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_UNIQUE_ID_REF_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_UNIQUE_ID_REF_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_STRUCT_DATATYPE_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_STRUCT_DATATYPE_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_NO_CN_NODES_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_NO_CN_NODES_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_DATATYPE_NOT_FOUND", SWIG_From_int(static_cast< int >(OCFM_ERR_DATATYPE_NOT_FOUND)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_VALUE_NOT_WITHIN_RANGE", SWIG_From_int(static_cast< int >(OCFM_ERR_VALUE_NOT_WITHIN_RANGE)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_MN_NODE_DOESNT_EXIST", SWIG_From_int(static_cast< int >(OCFM_ERR_MN_NODE_DOESNT_EXIST)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_CREATE_XML_WRITER_FAILED", SWIG_From_int(static_cast< int >(OCFM_ERR_CREATE_XML_WRITER_FAILED)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_XML_WRITER_START_ELT_FAILED", SWIG_From_int(static_cast< int >(OCFM_ERR_XML_WRITER_START_ELT_FAILED)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_XML_WRITER_END_ELT_FAILED", SWIG_From_int(static_cast< int >(OCFM_ERR_XML_WRITER_END_ELT_FAILED)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_XML_START_DOC_FAILED", SWIG_From_int(static_cast< int >(OCFM_ERR_XML_START_DOC_FAILED)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_XML_END_DOC_FAILED", SWIG_From_int(static_cast< int >(OCFM_ERR_XML_END_DOC_FAILED)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_CANNOT_OPEN_PROJECT_VER_MISMATCH", SWIG_From_int(static_cast< int >(OCFM_ERR_CANNOT_OPEN_PROJECT_VER_MISMATCH)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_PJTXML", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_PJTXML)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_PROJECT_SETTINGS", SWIG_From_int(static_cast< int >(OCFM_ERR_PROJECT_SETTINGS)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_INVALID_DATATYPE_FOR_PDO", SWIG_From_int(static_cast< int >(OCFM_ERR_INVALID_DATATYPE_FOR_PDO)));
  SWIG_Tcl_SetConstantObj(interp, "OCFM_ERR_UNKNOWN", SWIG_From_int(static_cast< int >(OCFM_ERR_UNKNOWN)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_FIRST_INDEX_IN_MN_OBD", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_NUM_ENTRIES_MN", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_NUM_ENTRIES_CN", SWIG_From_int(static_cast< int >(7)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_INDEX", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_SUBINDEX", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_SIZE", SWIG_From_int(static_cast< int >(3)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_DATA", SWIG_From_int(static_cast< int >(7)));
  SWIG_Tcl_SetConstantObj(interp, "INDEX_SIZE", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "SUBINDEX_SIZE", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "NODE_ID", SWIG_From_int(static_cast< int >(3)));
  SWIG_Tcl_SetConstantObj(interp, "OFFSET_FIRST_INDEX_IN_1F22", SWIG_From_int(static_cast< int >(11)));
  SWIG_Tcl_SetConstantObj(interp, "DEFTYPE", SWIG_From_int(static_cast< int >(DEFTYPE)));
  SWIG_Tcl_SetConstantObj(interp, "DEFSTRUCT", SWIG_From_int(static_cast< int >(DEFSTRUCT)));
  SWIG_Tcl_SetConstantObj(interp, "VAR", SWIG_From_int(static_cast< int >(VAR)));
  SWIG_Tcl_SetConstantObj(interp, "ARRAY", SWIG_From_int(static_cast< int >(ARRAY)));
  SWIG_Tcl_SetConstantObj(interp, "RECORD", SWIG_From_int(static_cast< int >(RECORD)));
  SWIG_Tcl_SetConstantObj(interp, "NO", SWIG_From_int(static_cast< int >(NO)));
  SWIG_Tcl_SetConstantObj(interp, "DEFAULT", SWIG_From_int(static_cast< int >(DEFAULT)));
  SWIG_Tcl_SetConstantObj(interp, "OPTIONAL", SWIG_From_int(static_cast< int >(OPTIONAL)));
  SWIG_Tcl_SetConstantObj(interp, "RPDO", SWIG_From_int(static_cast< int >(RPDO)));
  SWIG_Tcl_SetConstantObj(interp, "TPDO", SWIG_From_int(static_cast< int >(TPDO)));
  SWIG_Tcl_SetConstantObj(interp, "MN", SWIG_From_int(static_cast< int >(MN)));
  SWIG_Tcl_SetConstantObj(interp, "CN", SWIG_From_int(static_cast< int >(CN)));
  SWIG_Tcl_SetConstantObj(interp, "PDO_TPDO", SWIG_From_int(static_cast< int >(PDO_TPDO)));
  SWIG_Tcl_SetConstantObj(interp, "PDO_RPDO", SWIG_From_int(static_cast< int >(PDO_RPDO)));
  SWIG_Tcl_SetConstantObj(interp, "constant", SWIG_From_int(static_cast< int >(constant)));
  SWIG_Tcl_SetConstantObj(interp, "ro", SWIG_From_int(static_cast< int >(ro)));
  SWIG_Tcl_SetConstantObj(interp, "wr", SWIG_From_int(static_cast< int >(wr)));
  SWIG_Tcl_SetConstantObj(interp, "rw", SWIG_From_int(static_cast< int >(rw)));
  SWIG_Tcl_SetConstantObj(interp, "readWriteInput", SWIG_From_int(static_cast< int >(readWriteInput)));
  SWIG_Tcl_SetConstantObj(interp, "readWriteOutput", SWIG_From_int(static_cast< int >(readWriteOutput)));
  SWIG_Tcl_SetConstantObj(interp, "noAccess", SWIG_From_int(static_cast< int >(noAccess)));
  SWIG_Tcl_SetConstantObj(interp, "BITSTRING", SWIG_From_int(static_cast< int >(BITSTRING)));
  SWIG_Tcl_SetConstantObj(interp, "BOOL", SWIG_From_int(static_cast< int >(BOOL)));
  SWIG_Tcl_SetConstantObj(interp, "BYTE", SWIG_From_int(static_cast< int >(BYTE)));
  SWIG_Tcl_SetConstantObj(interp, "_CHAR", SWIG_From_int(static_cast< int >(_CHAR)));
  SWIG_Tcl_SetConstantObj(interp, "DWORD", SWIG_From_int(static_cast< int >(DWORD)));
  SWIG_Tcl_SetConstantObj(interp, "LWORD", SWIG_From_int(static_cast< int >(LWORD)));
  SWIG_Tcl_SetConstantObj(interp, "SINT", SWIG_From_int(static_cast< int >(SINT)));
  SWIG_Tcl_SetConstantObj(interp, "INT", SWIG_From_int(static_cast< int >(INT)));
  SWIG_Tcl_SetConstantObj(interp, "DINT", SWIG_From_int(static_cast< int >(DINT)));
  SWIG_Tcl_SetConstantObj(interp, "LINT", SWIG_From_int(static_cast< int >(LINT)));
  SWIG_Tcl_SetConstantObj(interp, "USINT", SWIG_From_int(static_cast< int >(USINT)));
  SWIG_Tcl_SetConstantObj(interp, "UINT", SWIG_From_int(static_cast< int >(UINT)));
  SWIG_Tcl_SetConstantObj(interp, "UDINT", SWIG_From_int(static_cast< int >(UDINT)));
  SWIG_Tcl_SetConstantObj(interp, "ULINT", SWIG_From_int(static_cast< int >(ULINT)));
  SWIG_Tcl_SetConstantObj(interp, "REAL", SWIG_From_int(static_cast< int >(REAL)));
  SWIG_Tcl_SetConstantObj(interp, "LREAL", SWIG_From_int(static_cast< int >(LREAL)));
  SWIG_Tcl_SetConstantObj(interp, "STRING", SWIG_From_int(static_cast< int >(STRING)));
  SWIG_Tcl_SetConstantObj(interp, "WSTRING", SWIG_From_int(static_cast< int >(WSTRING)));
  SWIG_Tcl_SetConstantObj(interp, "NAME", SWIG_From_int(static_cast< int >(NAME)));
  SWIG_Tcl_SetConstantObj(interp, "OBJECTTYPE", SWIG_From_int(static_cast< int >(OBJECTTYPE)));
  SWIG_Tcl_SetConstantObj(interp, "DATATYPE", SWIG_From_int(static_cast< int >(DATATYPE)));
  SWIG_Tcl_SetConstantObj(interp, "ACCESSTYPE", SWIG_From_int(static_cast< int >(ACCESSTYPE)));
  SWIG_Tcl_SetConstantObj(interp, "DEFAULTVALUE", SWIG_From_int(static_cast< int >(DEFAULTVALUE)));
  SWIG_Tcl_SetConstantObj(interp, "ACTUALVALUE", SWIG_From_int(static_cast< int >(ACTUALVALUE)));
  SWIG_Tcl_SetConstantObj(interp, "PDOMAPPING", SWIG_From_int(static_cast< int >(PDOMAPPING)));
  SWIG_Tcl_SetConstantObj(interp, "LOWLIMIT", SWIG_From_int(static_cast< int >(LOWLIMIT)));
  SWIG_Tcl_SetConstantObj(interp, "HIGHLIMIT", SWIG_From_int(static_cast< int >(HIGHLIMIT)));
  SWIG_Tcl_SetConstantObj(interp, "FLAGIFINCDC", SWIG_From_int(static_cast< int >(FLAGIFINCDC)));
  SWIG_Tcl_SetConstantObj(interp, "FALSE", SWIG_From_int(static_cast< int >(FALSE)));
  SWIG_Tcl_SetConstantObj(interp, "TRUE", SWIG_From_int(static_cast< int >(TRUE)));
  SWIG_Tcl_SetConstantObj(interp, "NO_AG", SWIG_From_int(static_cast< int >(NO_AG)));
  SWIG_Tcl_SetConstantObj(interp, "YES_AG", SWIG_From_int(static_cast< int >(YES_AG)));
  SWIG_Tcl_SetConstantObj(interp, "YES_AS", SWIG_From_int(static_cast< int >(YES_AS)));
  SWIG_Tcl_SetConstantObj(interp, "PROMPT_AS", SWIG_From_int(static_cast< int >(PROMPT_AS)));
  SWIG_Tcl_SetConstantObj(interp, "DISCARD_AS", SWIG_From_int(static_cast< int >(DISCARD_AS)));
  SWIG_Tcl_SetConstantObj(interp, "AUTOGENERATE", SWIG_From_int(static_cast< int >(AUTOGENERATE)));
  SWIG_Tcl_SetConstantObj(interp, "AUTOSAVE", SWIG_From_int(static_cast< int >(AUTOSAVE)));
  return TCL_OK;
}
SWIGEXPORT int Openconfiguratorwrapper_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

